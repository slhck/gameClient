.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFMPEG 1"
.TH FFMPEG 1 "2011-05-13" " " " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ffmpeg \- FFmpeg video converter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ffmpeg [[infile options][\fB\-i\fR \fIinfile\fR]]... {[outfile options] \fIoutfile\fR}...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
FFmpeg is a very fast video and audio converter. It can also grab from
a live audio/video source.
.PP
The command line interface is designed to be intuitive, in the sense
that FFmpeg tries to figure out all parameters that can possibly be
derived automatically. You usually only have to specify the target
bitrate you want.
.PP
FFmpeg can also convert from any sample rate to any other, and resize
video on the fly with a high quality polyphase filter.
.PP
As a general rule, options are applied to the next specified
file. Therefore, order is important, and you can have the same
option on the command line multiple times. Each occurrence is
then applied to the next input or output file.
.PP
* To set the video bitrate of the output file to 64kbit/s:
.PP
.Vb 1
\&        ffmpeg \-i input.avi \-b 64k output.avi
.Ve
.PP
* To force the frame rate of the output file to 24 fps:
.PP
.Vb 1
\&        ffmpeg \-i input.avi \-r 24 output.avi
.Ve
.PP
* To force the frame rate of the input file (valid for raw formats only)
to 1 fps and the frame rate of the output file to 24 fps:
.PP
.Vb 1
\&        ffmpeg \-r 1 \-i input.m2v \-r 24 output.avi
.Ve
.PP
The format option may be needed for raw input files.
.PP
By default, FFmpeg tries to convert as losslessly as possible: It
uses the same audio and video parameters for the outputs as the one
specified for the inputs.
.SH "OPTIONS"
.IX Header "OPTIONS"
All the numerical options, if not specified otherwise, accept in input
a string representing a number, which may contain one of the
International System number postfixes, for example 'K', 'M', 'G'.
If 'i' is appended after the postfix, powers of 2 are used instead of
powers of 10. The 'B' postfix multiplies the value for 8, and can be
appended after another postfix or used alone. This allows using for
example '\s-1KB\s0', 'MiB', 'G' and 'B' as postfix.
.PP
Options which do not take arguments are boolean options, and set the
corresponding value to true. They can be set to false by prefixing
with \*(L"no\*(R" the option name, for example using \*(L"\-nofoo\*(R" in the
commandline will set to false the boolean option with name \*(L"foo\*(R".
.Sh "Generic options"
.IX Subsection "Generic options"
These options are shared amongst the ff* tools.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Show license.
.IP "\fB\-h, \-?, \-help, \-\-help\fR" 4
.IX Item "-h, -?, -help, --help"
Show help.
.IP "\fB\-version\fR" 4
.IX Item "-version"
Show version.
.IP "\fB\-formats\fR" 4
.IX Item "-formats"
Show available formats.
.Sp
The fields preceding the format names have the following meanings:
.RS 4
.IP "\fBD\fR" 4
.IX Item "D"
Decoding available
.IP "\fBE\fR" 4
.IX Item "E"
Encoding available
.RE
.RS 4
.RE
.IP "\fB\-codecs\fR" 4
.IX Item "-codecs"
Show available codecs.
.Sp
The fields preceding the codec names have the following meanings:
.RS 4
.IP "\fBD\fR" 4
.IX Item "D"
Decoding available
.IP "\fBE\fR" 4
.IX Item "E"
Encoding available
.IP "\fBV/A/S\fR" 4
.IX Item "V/A/S"
Video/audio/subtitle codec
.IP "\fBS\fR" 4
.IX Item "S"
Codec supports slices
.IP "\fBD\fR" 4
.IX Item "D"
Codec supports direct rendering
.IP "\fBT\fR" 4
.IX Item "T"
Codec can handle input truncated at random locations instead of only at frame boundaries
.RE
.RS 4
.RE
.IP "\fB\-bsfs\fR" 4
.IX Item "-bsfs"
Show available bitstream filters.
.IP "\fB\-protocols\fR" 4
.IX Item "-protocols"
Show available protocols.
.IP "\fB\-filters\fR" 4
.IX Item "-filters"
Show available libavfilter filters.
.IP "\fB\-pix_fmts\fR" 4
.IX Item "-pix_fmts"
Show available pixel formats.
.IP "\fB\-loglevel\fR \fIloglevel\fR" 4
.IX Item "-loglevel loglevel"
Set the logging level used by the library.
\&\fIloglevel\fR is a number or a string containing one of the following values:
.RS 4
.IP "\fBquiet\fR" 4
.IX Item "quiet"
.PD 0
.IP "\fBpanic\fR" 4
.IX Item "panic"
.IP "\fBfatal\fR" 4
.IX Item "fatal"
.IP "\fBerror\fR" 4
.IX Item "error"
.IP "\fBwarning\fR" 4
.IX Item "warning"
.IP "\fBinfo\fR" 4
.IX Item "info"
.IP "\fBverbose\fR" 4
.IX Item "verbose"
.IP "\fBdebug\fR" 4
.IX Item "debug"
.RE
.RS 4
.PD
.Sp
By default the program logs to stderr, if coloring is supported by the
terminal, colors are used to mark errors and warnings. Log coloring
can be disabled setting the environment variable
\&\fB\s-1FFMPEG_FORCE_NOCOLOR\s0\fR or \fB\s-1NO_COLOR\s0\fR, or can be forced setting
the environment variable \fB\s-1FFMPEG_FORCE_COLOR\s0\fR.
The use of the environment variable \fB\s-1NO_COLOR\s0\fR is deprecated and
will be dropped in a following FFmpeg version.
.RE
.Sh "Main options"
.IX Subsection "Main options"
.IP "\fB\-f\fR \fIfmt\fR" 4
.IX Item "-f fmt"
Force format.
.IP "\fB\-i\fR \fIfilename\fR" 4
.IX Item "-i filename"
input file name
.IP "\fB\-y\fR" 4
.IX Item "-y"
Overwrite output files.
.IP "\fB\-t\fR \fIduration\fR" 4
.IX Item "-t duration"
Restrict the transcoded/captured video sequence
to the duration specified in seconds.
\&\f(CW\*(C`hh:mm:ss[.xxx]\*(C'\fR syntax is also supported.
.IP "\fB\-fs\fR \fIlimit_size\fR" 4
.IX Item "-fs limit_size"
Set the file size limit.
.IP "\fB\-ss\fR \fIposition\fR" 4
.IX Item "-ss position"
Seek to given time position in seconds.
\&\f(CW\*(C`hh:mm:ss[.xxx]\*(C'\fR syntax is also supported.
.IP "\fB\-itsoffset\fR \fIoffset\fR" 4
.IX Item "-itsoffset offset"
Set the input time offset in seconds.
\&\f(CW\*(C`[\-]hh:mm:ss[.xxx]\*(C'\fR syntax is also supported.
This option affects all the input files that follow it.
The offset is added to the timestamps of the input files.
Specifying a positive offset means that the corresponding
streams are delayed by 'offset' seconds.
.IP "\fB\-timestamp\fR \fItime\fR" 4
.IX Item "-timestamp time"
Set the recording timestamp in the container.
The syntax for \fItime\fR is:
.Sp
.Vb 1
\&        now|([(YYYY\-MM\-DD|YYYYMMDD)[T|t| ]]((HH[:MM[:SS[.m...]]])|(HH[MM[SS[.m...]]]))[Z|z])
.Ve
.Sp
If the value is \*(L"now\*(R" it takes the current time.
Time is local time unless 'Z' or 'z' is appended, in which case it is
interpreted as \s-1UTC\s0.
If the year-month-day part is not specified it takes the current
year-month-day.
.IP "\fB\-metadata\fR \fIkey\fR\fB=\fR\fIvalue\fR" 4
.IX Item "-metadata key=value"
Set a metadata key/value pair.
.Sp
For example, for setting the title in the output file:
.Sp
.Vb 1
\&        ffmpeg \-i in.avi \-metadata title="my title" out.flv
.Ve
.IP "\fB\-v\fR \fInumber\fR" 4
.IX Item "-v number"
Set the logging verbosity level.
.IP "\fB\-target\fR \fItype\fR" 4
.IX Item "-target type"
Specify target file type (\*(L"vcd\*(R", \*(L"svcd\*(R", \*(L"dvd\*(R", \*(L"dv\*(R", \*(L"dv50\*(R", \*(L"pal-vcd\*(R",
\&\*(L"ntsc-svcd\*(R", ... ). All the format options (bitrate, codecs,
buffer sizes) are then set automatically. You can just type:
.Sp
.Vb 1
\&        ffmpeg \-i myfile.avi \-target vcd /tmp/vcd.mpg
.Ve
.Sp
Nevertheless you can specify additional options as long as you know
they do not conflict with the standard, as in:
.Sp
.Vb 1
\&        ffmpeg \-i myfile.avi \-target vcd \-bf 2 /tmp/vcd.mpg
.Ve
.IP "\fB\-dframes\fR \fInumber\fR" 4
.IX Item "-dframes number"
Set the number of data frames to record.
.IP "\fB\-scodec\fR \fIcodec\fR" 4
.IX Item "-scodec codec"
Force subtitle codec ('copy' to copy stream).
.IP "\fB\-newsubtitle\fR" 4
.IX Item "-newsubtitle"
Add a new subtitle stream to the current output stream.
.IP "\fB\-slang\fR \fIcode\fR" 4
.IX Item "-slang code"
Set the \s-1ISO\s0 639 language code (3 letters) of the current subtitle stream.
.Sh "Video Options"
.IX Subsection "Video Options"
.IP "\fB\-b\fR \fIbitrate\fR" 4
.IX Item "-b bitrate"
Set the video bitrate in bit/s (default = 200 kb/s).
.IP "\fB\-vframes\fR \fInumber\fR" 4
.IX Item "-vframes number"
Set the number of video frames to record.
.IP "\fB\-r\fR \fIfps\fR" 4
.IX Item "-r fps"
Set frame rate (Hz value, fraction or abbreviation), (default = 25).
.IP "\fB\-s\fR \fIsize\fR" 4
.IX Item "-s size"
Set frame size. The format is \fBwxh\fR (ffserver default = 160x128, ffmpeg default = same as source).
The following abbreviations are recognized:
.RS 4
.IP "\fBsqcif\fR" 4
.IX Item "sqcif"
128x96
.IP "\fBqcif\fR" 4
.IX Item "qcif"
176x144
.IP "\fBcif\fR" 4
.IX Item "cif"
352x288
.IP "\fB4cif\fR" 4
.IX Item "4cif"
704x576
.IP "\fB16cif\fR" 4
.IX Item "16cif"
1408x1152
.IP "\fBqqvga\fR" 4
.IX Item "qqvga"
160x120
.IP "\fBqvga\fR" 4
.IX Item "qvga"
320x240
.IP "\fBvga\fR" 4
.IX Item "vga"
640x480
.IP "\fBsvga\fR" 4
.IX Item "svga"
800x600
.IP "\fBxga\fR" 4
.IX Item "xga"
1024x768
.IP "\fBuxga\fR" 4
.IX Item "uxga"
1600x1200
.IP "\fBqxga\fR" 4
.IX Item "qxga"
2048x1536
.IP "\fBsxga\fR" 4
.IX Item "sxga"
1280x1024
.IP "\fBqsxga\fR" 4
.IX Item "qsxga"
2560x2048
.IP "\fBhsxga\fR" 4
.IX Item "hsxga"
5120x4096
.IP "\fBwvga\fR" 4
.IX Item "wvga"
852x480
.IP "\fBwxga\fR" 4
.IX Item "wxga"
1366x768
.IP "\fBwsxga\fR" 4
.IX Item "wsxga"
1600x1024
.IP "\fBwuxga\fR" 4
.IX Item "wuxga"
1920x1200
.IP "\fBwoxga\fR" 4
.IX Item "woxga"
2560x1600
.IP "\fBwqsxga\fR" 4
.IX Item "wqsxga"
3200x2048
.IP "\fBwquxga\fR" 4
.IX Item "wquxga"
3840x2400
.IP "\fBwhsxga\fR" 4
.IX Item "whsxga"
6400x4096
.IP "\fBwhuxga\fR" 4
.IX Item "whuxga"
7680x4800
.IP "\fBcga\fR" 4
.IX Item "cga"
320x200
.IP "\fBega\fR" 4
.IX Item "ega"
640x350
.IP "\fBhd480\fR" 4
.IX Item "hd480"
852x480
.IP "\fBhd720\fR" 4
.IX Item "hd720"
1280x720
.IP "\fBhd1080\fR" 4
.IX Item "hd1080"
1920x1080
.RE
.RS 4
.RE
.IP "\fB\-aspect\fR \fIaspect\fR" 4
.IX Item "-aspect aspect"
Set aspect ratio (4:3, 16:9 or 1.3333, 1.7777).
.IP "\fB\-croptop\fR \fIsize\fR" 4
.IX Item "-croptop size"
.PD 0
.IP "\fB\-cropbottom\fR \fIsize\fR" 4
.IX Item "-cropbottom size"
.IP "\fB\-cropleft\fR \fIsize\fR" 4
.IX Item "-cropleft size"
.IP "\fB\-cropright\fR \fIsize\fR" 4
.IX Item "-cropright size"
.PD
All the crop options have been removed. Use \-vf
crop=width:height:x:y instead.
.IP "\fB\-padtop\fR \fIsize\fR" 4
.IX Item "-padtop size"
.PD 0
.IP "\fB\-padbottom\fR \fIsize\fR" 4
.IX Item "-padbottom size"
.IP "\fB\-padleft\fR \fIsize\fR" 4
.IX Item "-padleft size"
.IP "\fB\-padright\fR \fIsize\fR" 4
.IX Item "-padright size"
.IP "\fB\-padcolor\fR \fIhex_color\fR" 4
.IX Item "-padcolor hex_color"
.PD
All the pad options have been removed. Use \-vf
pad=width:height:x:y:color instead.
.IP "\fB\-vn\fR" 4
.IX Item "-vn"
Disable video recording.
.IP "\fB\-bt\fR \fItolerance\fR" 4
.IX Item "-bt tolerance"
Set video bitrate tolerance (in bits, default 4000k).
Has a minimum value of: (target_bitrate/target_framerate).
In 1\-pass mode, bitrate tolerance specifies how far ratecontrol is
willing to deviate from the target average bitrate value. This is
not related to min/max bitrate. Lowering tolerance too much has
an adverse effect on quality.
.IP "\fB\-maxrate\fR \fIbitrate\fR" 4
.IX Item "-maxrate bitrate"
Set max video bitrate (in bit/s).
Requires \-bufsize to be set.
.IP "\fB\-minrate\fR \fIbitrate\fR" 4
.IX Item "-minrate bitrate"
Set min video bitrate (in bit/s).
Most useful in setting up a \s-1CBR\s0 encode:
.Sp
.Vb 1
\&        ffmpeg \-i myfile.avi \-b 4000k \-minrate 4000k \-maxrate 4000k \-bufsize 1835k out.m2v
.Ve
.Sp
It is of little use elsewise.
.IP "\fB\-bufsize\fR \fIsize\fR" 4
.IX Item "-bufsize size"
Set video buffer verifier buffer size (in bits).
.IP "\fB\-vcodec\fR \fIcodec\fR" 4
.IX Item "-vcodec codec"
Force video codec to \fIcodec\fR. Use the \f(CW\*(C`copy\*(C'\fR special value to
tell that the raw codec data must be copied as is.
.IP "\fB\-sameq\fR" 4
.IX Item "-sameq"
Use same video quality as source (implies \s-1VBR\s0).
.IP "\fB\-pass\fR \fIn\fR" 4
.IX Item "-pass n"
Select the pass number (1 or 2). It is used to do two-pass
video encoding. The statistics of the video are recorded in the first
pass into a log file (see also the option \-passlogfile),
and in the second pass that log file is used to generate the video
at the exact requested bitrate.
On pass 1, you may just deactivate audio and set output to null,
examples for Windows and Unix:
.Sp
.Vb 2
\&        ffmpeg \-i foo.mov \-vcodec libxvid \-pass 1 \-an \-f rawvideo \-y NUL
\&        ffmpeg \-i foo.mov \-vcodec libxvid \-pass 1 \-an \-f rawvideo \-y /dev/null
.Ve
.IP "\fB\-passlogfile\fR \fIprefix\fR" 4
.IX Item "-passlogfile prefix"
Set two-pass log file name prefix to \fIprefix\fR, the default file name
prefix is ``ffmpeg2pass''. The complete file name will be
\&\fI\s-1PREFIX\-N\s0.log\fR, where N is a number specific to the output
stream.
.IP "\fB\-newvideo\fR" 4
.IX Item "-newvideo"
Add a new video stream to the current output stream.
.IP "\fB\-vlang\fR \fIcode\fR" 4
.IX Item "-vlang code"
Set the \s-1ISO\s0 639 language code (3 letters) of the current video stream.
.IP "\fB\-vf\fR \fIfilter_graph\fR" 4
.IX Item "-vf filter_graph"
\&\fIfilter_graph\fR is a description of the filter graph to apply to
the input video.
Use the option \*(L"\-filters\*(R" to show all the available filters (including
also sources and sinks).
.Sh "Advanced Video Options"
.IX Subsection "Advanced Video Options"
.IP "\fB\-pix_fmt\fR \fIformat\fR" 4
.IX Item "-pix_fmt format"
Set pixel format. Use 'list' as parameter to show all the supported
pixel formats.
.IP "\fB\-sws_flags\fR \fIflags\fR" 4
.IX Item "-sws_flags flags"
Set SwScaler flags.
.IP "\fB\-g\fR \fIgop_size\fR" 4
.IX Item "-g gop_size"
Set the group of pictures size.
.IP "\fB\-intra\fR" 4
.IX Item "-intra"
Use only intra frames.
.IP "\fB\-vdt\fR \fIn\fR" 4
.IX Item "-vdt n"
Discard threshold.
.IP "\fB\-qscale\fR \fIq\fR" 4
.IX Item "-qscale q"
Use fixed video quantizer scale (\s-1VBR\s0).
.IP "\fB\-qmin\fR \fIq\fR" 4
.IX Item "-qmin q"
minimum video quantizer scale (\s-1VBR\s0)
.IP "\fB\-qmax\fR \fIq\fR" 4
.IX Item "-qmax q"
maximum video quantizer scale (\s-1VBR\s0)
.IP "\fB\-qdiff\fR \fIq\fR" 4
.IX Item "-qdiff q"
maximum difference between the quantizer scales (\s-1VBR\s0)
.IP "\fB\-qblur\fR \fIblur\fR" 4
.IX Item "-qblur blur"
video quantizer scale blur (\s-1VBR\s0) (range 0.0 \- 1.0)
.IP "\fB\-qcomp\fR \fIcompression\fR" 4
.IX Item "-qcomp compression"
video quantizer scale compression (\s-1VBR\s0) (default 0.5).
Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0\-1.0
.IP "\fB\-lmin\fR \fIlambda\fR" 4
.IX Item "-lmin lambda"
minimum video lagrange factor (\s-1VBR\s0)
.IP "\fB\-lmax\fR \fIlambda\fR" 4
.IX Item "-lmax lambda"
max video lagrange factor (\s-1VBR\s0)
.IP "\fB\-mblmin\fR \fIlambda\fR" 4
.IX Item "-mblmin lambda"
minimum macroblock quantizer scale (\s-1VBR\s0)
.IP "\fB\-mblmax\fR \fIlambda\fR" 4
.IX Item "-mblmax lambda"
maximum macroblock quantizer scale (\s-1VBR\s0)
.Sp
These four options (lmin, lmax, mblmin, mblmax) use 'lambda' units,
but you may use the \s-1QP2LAMBDA\s0 constant to easily convert from 'q' units:
.Sp
.Vb 1
\&        ffmpeg \-i src.ext \-lmax 21*QP2LAMBDA dst.ext
.Ve
.IP "\fB\-rc_init_cplx\fR \fIcomplexity\fR" 4
.IX Item "-rc_init_cplx complexity"
initial complexity for single pass encoding
.IP "\fB\-b_qfactor\fR \fIfactor\fR" 4
.IX Item "-b_qfactor factor"
qp factor between P\- and B\-frames
.IP "\fB\-i_qfactor\fR \fIfactor\fR" 4
.IX Item "-i_qfactor factor"
qp factor between P\- and I\-frames
.IP "\fB\-b_qoffset\fR \fIoffset\fR" 4
.IX Item "-b_qoffset offset"
qp offset between P\- and B\-frames
.IP "\fB\-i_qoffset\fR \fIoffset\fR" 4
.IX Item "-i_qoffset offset"
qp offset between P\- and I\-frames
.IP "\fB\-rc_eq\fR \fIequation\fR" 4
.IX Item "-rc_eq equation"
Set rate control equation (see section \*(L"Expression Evaluation\*(R")
(default = \f(CW\*(C`tex^qComp\*(C'\fR).
.Sp
When computing the rate control equation expression, besides the
standard functions defined in the section \*(L"Expression Evaluation\*(R", the
following functions are available:
.RS 4
.IP "\fIbits2qp(bits)\fR" 4
.IX Item "bits2qp(bits)"
.PD 0
.IP "\fIqp2bits(qp)\fR" 4
.IX Item "qp2bits(qp)"
.RE
.RS 4
.PD
.Sp
and the following constants are available:
.IP "\fIiTex\fR" 4
.IX Item "iTex"
.PD 0
.IP "\fIpTex\fR" 4
.IX Item "pTex"
.IP "\fItex\fR" 4
.IX Item "tex"
.IP "\fImv\fR" 4
.IX Item "mv"
.IP "\fIfCode\fR" 4
.IX Item "fCode"
.IP "\fIiCount\fR" 4
.IX Item "iCount"
.IP "\fImcVar\fR" 4
.IX Item "mcVar"
.IP "\fIvar\fR" 4
.IX Item "var"
.IP "\fIisI\fR" 4
.IX Item "isI"
.IP "\fIisP\fR" 4
.IX Item "isP"
.IP "\fIisB\fR" 4
.IX Item "isB"
.IP "\fIavgQP\fR" 4
.IX Item "avgQP"
.IP "\fIqComp\fR" 4
.IX Item "qComp"
.IP "\fIavgIITex\fR" 4
.IX Item "avgIITex"
.IP "\fIavgPITex\fR" 4
.IX Item "avgPITex"
.IP "\fIavgPPTex\fR" 4
.IX Item "avgPPTex"
.IP "\fIavgBPTex\fR" 4
.IX Item "avgBPTex"
.IP "\fIavgTex\fR" 4
.IX Item "avgTex"
.RE
.RS 4
.RE
.IP "\fB\-rc_override\fR \fIoverride\fR" 4
.IX Item "-rc_override override"
.PD
rate control override for specific intervals
.IP "\fB\-me_method\fR \fImethod\fR" 4
.IX Item "-me_method method"
Set motion estimation method to \fImethod\fR.
Available methods are (from lowest to best quality):
.RS 4
.IP "\fBzero\fR" 4
.IX Item "zero"
Try just the (0, 0) vector.
.IP "\fBphods\fR" 4
.IX Item "phods"
.PD 0
.IP "\fBlog\fR" 4
.IX Item "log"
.IP "\fBx1\fR" 4
.IX Item "x1"
.IP "\fBhex\fR" 4
.IX Item "hex"
.IP "\fBumh\fR" 4
.IX Item "umh"
.IP "\fBepzs\fR" 4
.IX Item "epzs"
.PD
(default method)
.IP "\fBfull\fR" 4
.IX Item "full"
exhaustive search (slow and marginally better than epzs)
.RE
.RS 4
.RE
.IP "\fB\-dct_algo\fR \fIalgo\fR" 4
.IX Item "-dct_algo algo"
Set \s-1DCT\s0 algorithm to \fIalgo\fR. Available values are:
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
\&\s-1FF_DCT_AUTO\s0 (default)
.IP "\fB1\fR" 4
.IX Item "1"
\&\s-1FF_DCT_FASTINT\s0
.IP "\fB2\fR" 4
.IX Item "2"
\&\s-1FF_DCT_INT\s0
.IP "\fB3\fR" 4
.IX Item "3"
\&\s-1FF_DCT_MMX\s0
.IP "\fB4\fR" 4
.IX Item "4"
\&\s-1FF_DCT_MLIB\s0
.IP "\fB5\fR" 4
.IX Item "5"
\&\s-1FF_DCT_ALTIVEC\s0
.RE
.RS 4
.RE
.IP "\fB\-idct_algo\fR \fIalgo\fR" 4
.IX Item "-idct_algo algo"
Set \s-1IDCT\s0 algorithm to \fIalgo\fR. Available values are:
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
\&\s-1FF_IDCT_AUTO\s0 (default)
.IP "\fB1\fR" 4
.IX Item "1"
\&\s-1FF_IDCT_INT\s0
.IP "\fB2\fR" 4
.IX Item "2"
\&\s-1FF_IDCT_SIMPLE\s0
.IP "\fB3\fR" 4
.IX Item "3"
\&\s-1FF_IDCT_SIMPLEMMX\s0
.IP "\fB4\fR" 4
.IX Item "4"
\&\s-1FF_IDCT_LIBMPEG2MMX\s0
.IP "\fB5\fR" 4
.IX Item "5"
\&\s-1FF_IDCT_PS2\s0
.IP "\fB6\fR" 4
.IX Item "6"
\&\s-1FF_IDCT_MLIB\s0
.IP "\fB7\fR" 4
.IX Item "7"
\&\s-1FF_IDCT_ARM\s0
.IP "\fB8\fR" 4
.IX Item "8"
\&\s-1FF_IDCT_ALTIVEC\s0
.IP "\fB9\fR" 4
.IX Item "9"
\&\s-1FF_IDCT_SH4\s0
.IP "\fB10\fR" 4
.IX Item "10"
\&\s-1FF_IDCT_SIMPLEARM\s0
.RE
.RS 4
.RE
.IP "\fB\-er\fR \fIn\fR" 4
.IX Item "-er n"
Set error resilience to \fIn\fR.
.RS 4
.IP "\fB1\fR" 4
.IX Item "1"
\&\s-1FF_ER_CAREFUL\s0 (default)
.IP "\fB2\fR" 4
.IX Item "2"
\&\s-1FF_ER_COMPLIANT\s0
.IP "\fB3\fR" 4
.IX Item "3"
\&\s-1FF_ER_AGGRESSIVE\s0
.IP "\fB4\fR" 4
.IX Item "4"
\&\s-1FF_ER_VERY_AGGRESSIVE\s0
.RE
.RS 4
.RE
.IP "\fB\-ec\fR \fIbit_mask\fR" 4
.IX Item "-ec bit_mask"
Set error concealment to \fIbit_mask\fR. \fIbit_mask\fR is a bit mask of
the following values:
.RS 4
.IP "\fB1\fR" 4
.IX Item "1"
\&\s-1FF_EC_GUESS_MVS\s0 (default = enabled)
.IP "\fB2\fR" 4
.IX Item "2"
\&\s-1FF_EC_DEBLOCK\s0 (default = enabled)
.RE
.RS 4
.RE
.IP "\fB\-bf\fR \fIframes\fR" 4
.IX Item "-bf frames"
Use 'frames' B\-frames (supported for \s-1MPEG\-1\s0, \s-1MPEG\-2\s0 and \s-1MPEG\-4\s0).
.IP "\fB\-mbd\fR \fImode\fR" 4
.IX Item "-mbd mode"
macroblock decision
.RS 4
.IP "\fB0\fR" 4
.IX Item "0"
\&\s-1FF_MB_DECISION_SIMPLE:\s0 Use mb_cmp (cannot change it yet in FFmpeg).
.IP "\fB1\fR" 4
.IX Item "1"
\&\s-1FF_MB_DECISION_BITS:\s0 Choose the one which needs the fewest bits.
.IP "\fB2\fR" 4
.IX Item "2"
\&\s-1FF_MB_DECISION_RD:\s0 rate distortion
.RE
.RS 4
.RE
.IP "\fB\-4mv\fR" 4
.IX Item "-4mv"
Use four motion vector by macroblock (\s-1MPEG\-4\s0 only).
.IP "\fB\-part\fR" 4
.IX Item "-part"
Use data partitioning (\s-1MPEG\-4\s0 only).
.IP "\fB\-bug\fR \fIparam\fR" 4
.IX Item "-bug param"
Work around encoder bugs that are not auto-detected.
.IP "\fB\-strict\fR \fIstrictness\fR" 4
.IX Item "-strict strictness"
How strictly to follow the standards.
.IP "\fB\-aic\fR" 4
.IX Item "-aic"
Enable Advanced intra coding (h263+).
.IP "\fB\-umv\fR" 4
.IX Item "-umv"
Enable Unlimited Motion Vector (h263+)
.IP "\fB\-deinterlace\fR" 4
.IX Item "-deinterlace"
Deinterlace pictures.
.IP "\fB\-ilme\fR" 4
.IX Item "-ilme"
Force interlacing support in encoder (\s-1MPEG\-2\s0 and \s-1MPEG\-4\s0 only).
Use this option if your input file is interlaced and you want
to keep the interlaced format for minimum losses.
The alternative is to deinterlace the input stream with
\&\fB\-deinterlace\fR, but deinterlacing introduces losses.
.IP "\fB\-psnr\fR" 4
.IX Item "-psnr"
Calculate \s-1PSNR\s0 of compressed frames.
.IP "\fB\-vstats\fR" 4
.IX Item "-vstats"
Dump video coding statistics to \fIvstats_HHMMSS.log\fR.
.IP "\fB\-vstats_file\fR \fIfile\fR" 4
.IX Item "-vstats_file file"
Dump video coding statistics to \fIfile\fR.
.IP "\fB\-top\fR \fIn\fR" 4
.IX Item "-top n"
top=1/bottom=0/auto=\-1 field first
.IP "\fB\-dc\fR \fIprecision\fR" 4
.IX Item "-dc precision"
Intra_dc_precision.
.IP "\fB\-vtag\fR \fIfourcc/tag\fR" 4
.IX Item "-vtag fourcc/tag"
Force video tag/fourcc.
.IP "\fB\-qphist\fR" 4
.IX Item "-qphist"
Show \s-1QP\s0 histogram.
.IP "\fB\-vbsf\fR \fIbitstream_filter\fR" 4
.IX Item "-vbsf bitstream_filter"
Bitstream filters available are \*(L"dump_extra\*(R", \*(L"remove_extra\*(R", \*(L"noise\*(R", \*(L"h264_mp4toannexb\*(R", \*(L"imxdump\*(R", \*(L"mjpegadump\*(R", \*(L"mjpeg2jpeg\*(R".
.Sp
.Vb 1
\&        ffmpeg \-i h264.mp4 \-vcodec copy \-vbsf h264_mp4toannexb \-an out.h264
.Ve
.IP "\fB\-force_key_frames\fR \fItime\fR\fB[,\fR\fItime\fR\fB...]\fR" 4
.IX Item "-force_key_frames time[,time...]"
Force key frames at the specified timestamps, more precisely at the first
frames after each specified time.
This option can be useful to ensure that a seek point is present at a
chapter mark or any other designated place in the output file.
The timestamps must be specified in ascending order.
.Sh "Audio Options"
.IX Subsection "Audio Options"
.IP "\fB\-aframes\fR \fInumber\fR" 4
.IX Item "-aframes number"
Set the number of audio frames to record.
.IP "\fB\-ar\fR \fIfreq\fR" 4
.IX Item "-ar freq"
Set the audio sampling frequency (default = 44100 Hz).
.IP "\fB\-ab\fR \fIbitrate\fR" 4
.IX Item "-ab bitrate"
Set the audio bitrate in bit/s (default = 64k).
.IP "\fB\-aq\fR \fIq\fR" 4
.IX Item "-aq q"
Set the audio quality (codec-specific, \s-1VBR\s0).
.IP "\fB\-ac\fR \fIchannels\fR" 4
.IX Item "-ac channels"
Set the number of audio channels. For input streams it is set by
default to 1, for output streams it is set by default to the same
number of audio channels in input. If the input file has audio streams
with different channel count, the behaviour is undefined.
.IP "\fB\-an\fR" 4
.IX Item "-an"
Disable audio recording.
.IP "\fB\-acodec\fR \fIcodec\fR" 4
.IX Item "-acodec codec"
Force audio codec to \fIcodec\fR. Use the \f(CW\*(C`copy\*(C'\fR special value to
specify that the raw codec data must be copied as is.
.IP "\fB\-newaudio\fR" 4
.IX Item "-newaudio"
Add a new audio track to the output file. If you want to specify parameters,
do so before \f(CW\*(C`\-newaudio\*(C'\fR (\f(CW\*(C`\-acodec\*(C'\fR, \f(CW\*(C`\-ab\*(C'\fR, etc..).
.Sp
Mapping will be done automatically, if the number of output streams is equal to
the number of input streams, else it will pick the first one that matches. You
can override the mapping using \f(CW\*(C`\-map\*(C'\fR as usual.
.Sp
Example:
.Sp
.Vb 1
\&        ffmpeg \-i file.mpg \-vcodec copy \-acodec ac3 \-ab 384k test.mpg \-acodec mp2 \-ab 192k \-newaudio
.Ve
.IP "\fB\-alang\fR \fIcode\fR" 4
.IX Item "-alang code"
Set the \s-1ISO\s0 639 language code (3 letters) of the current audio stream.
.Sh "Advanced Audio options:"
.IX Subsection "Advanced Audio options:"
.IP "\fB\-atag\fR \fIfourcc/tag\fR" 4
.IX Item "-atag fourcc/tag"
Force audio tag/fourcc.
.IP "\fB\-absf\fR \fIbitstream_filter\fR" 4
.IX Item "-absf bitstream_filter"
Bitstream filters available are \*(L"dump_extra\*(R", \*(L"remove_extra\*(R", \*(L"noise\*(R", \*(L"mp3comp\*(R", \*(L"mp3decomp\*(R".
.Sh "Subtitle options:"
.IX Subsection "Subtitle options:"
.IP "\fB\-scodec\fR \fIcodec\fR" 4
.IX Item "-scodec codec"
Force subtitle codec ('copy' to copy stream).
.IP "\fB\-newsubtitle\fR" 4
.IX Item "-newsubtitle"
Add a new subtitle stream to the current output stream.
.IP "\fB\-slang\fR \fIcode\fR" 4
.IX Item "-slang code"
Set the \s-1ISO\s0 639 language code (3 letters) of the current subtitle stream.
.IP "\fB\-sn\fR" 4
.IX Item "-sn"
Disable subtitle recording.
.IP "\fB\-sbsf\fR \fIbitstream_filter\fR" 4
.IX Item "-sbsf bitstream_filter"
Bitstream filters available are \*(L"mov2textsub\*(R", \*(L"text2movsub\*(R".
.Sp
.Vb 1
\&        ffmpeg \-i file.mov \-an \-vn \-sbsf mov2textsub \-scodec copy \-f rawvideo sub.txt
.Ve
.Sh "Audio/Video grab options"
.IX Subsection "Audio/Video grab options"
.IP "\fB\-vc\fR \fIchannel\fR" 4
.IX Item "-vc channel"
Set video grab channel (\s-1DV1394\s0 only).
.IP "\fB\-tvstd\fR \fIstandard\fR" 4
.IX Item "-tvstd standard"
Set television standard (\s-1NTSC\s0, \s-1PAL\s0 (\s-1SECAM\s0)).
.IP "\fB\-isync\fR" 4
.IX Item "-isync"
Synchronize read on input.
.Sh "Advanced options"
.IX Subsection "Advanced options"
.IP "\fB\-map\fR \fIinput_stream_id\fR\fB[:\fR\fIsync_stream_id\fR\fB]\fR" 4
.IX Item "-map input_stream_id[:sync_stream_id]"
Set stream mapping from input streams to output streams.
Just enumerate the input streams in the order you want them in the output.
\&\fIsync_stream_id\fR if specified sets the input stream to sync
against.
.IP "\fB\-map_meta_data\fR \fIoutfile\fR\fB[,\fR\fImetadata\fR\fB]:\fR\fIinfile\fR\fB[,\fR\fImetadata\fR\fB]\fR" 4
.IX Item "-map_meta_data outfile[,metadata]:infile[,metadata]"
Set meta data information of \fIoutfile\fR from \fIinfile\fR. Note that those
are file indices (zero-based), not filenames.
Optional \fImetadata\fR parameters specify, which metadata to copy \- (g)lobal
(i.e. metadata that applies to the whole file), per\-(s)tream, per\-(c)hapter or
per\-(p)rogram. All metadata specifiers other than global must be followed by the
stream/chapter/program number. If metadata specifier is omitted, it defaults to
global.
.Sp
By default, global metadata is copied from the first input file to all output files,
per-stream and per-chapter metadata is copied along with streams/chapters. These
default mappings are disabled by creating any mapping of the relevant type. A negative
file index can be used to create a dummy mapping that just disables automatic copying.
.Sp
For example to copy metadata from the first stream of the input file to global metadata
of the output file:
.Sp
.Vb 1
\&        ffmpeg \-i in.ogg \-map_meta_data 0:0,s0 out.mp3
.Ve
.IP "\fB\-map_chapters\fR \fIoutfile\fR\fB:\fR\fIinfile\fR" 4
.IX Item "-map_chapters outfile:infile"
Copy chapters from \fIinfile\fR to \fIoutfile\fR. If no chapter mapping is specified,
then chapters are copied from the first input file with at least one chapter to all
output files. Use a negative file index to disable any chapter copying.
.IP "\fB\-debug\fR" 4
.IX Item "-debug"
Print specific debug info.
.IP "\fB\-benchmark\fR" 4
.IX Item "-benchmark"
Show benchmarking information at the end of an encode.
Shows \s-1CPU\s0 time used and maximum memory consumption.
Maximum memory consumption is not supported on all systems,
it will usually display as 0 if not supported.
.IP "\fB\-dump\fR" 4
.IX Item "-dump"
Dump each input packet.
.IP "\fB\-hex\fR" 4
.IX Item "-hex"
When dumping packets, also dump the payload.
.IP "\fB\-bitexact\fR" 4
.IX Item "-bitexact"
Only use bit exact algorithms (for codec testing).
.IP "\fB\-ps\fR \fIsize\fR" 4
.IX Item "-ps size"
Set \s-1RTP\s0 payload size in bytes.
.IP "\fB\-re\fR" 4
.IX Item "-re"
Read input at native frame rate. Mainly used to simulate a grab device.
.IP "\fB\-loop_input\fR" 4
.IX Item "-loop_input"
Loop over the input stream. Currently it works only for image
streams. This option is used for automatic FFserver testing.
.IP "\fB\-loop_output\fR \fInumber_of_times\fR" 4
.IX Item "-loop_output number_of_times"
Repeatedly loop output for formats that support looping such as animated \s-1GIF\s0
(0 will loop the output infinitely).
.IP "\fB\-threads\fR \fIcount\fR" 4
.IX Item "-threads count"
Thread count.
.IP "\fB\-vsync\fR \fIparameter\fR" 4
.IX Item "-vsync parameter"
Video sync method.
0   Each frame is passed with its timestamp from the demuxer to the muxer
1   Frames will be duplicated and dropped to achieve exactly the requested
    constant framerate.
2   Frames are passed through with their timestamp or dropped so as to prevent
    2 frames from having the same timestamp
\&\-1  Chooses between 1 and 2 depending on muxer capabilities. This is the default method.
.Sp
With \-map you can select from
which stream the timestamps should be taken. You can leave either video or
audio unchanged and sync the remaining stream(s) to the unchanged one.
.IP "\fB\-async\fR \fIsamples_per_second\fR" 4
.IX Item "-async samples_per_second"
Audio sync method. \*(L"Stretches/squeezes\*(R" the audio stream to match the timestamps,
the parameter is the maximum samples per second by which the audio is changed.
\&\-async 1 is a special case where only the start of the audio stream is corrected
without any later correction.
.IP "\fB\-copyts\fR" 4
.IX Item "-copyts"
Copy timestamps from input to output.
.IP "\fB\-shortest\fR" 4
.IX Item "-shortest"
Finish encoding when the shortest input stream ends.
.IP "\fB\-dts_delta_threshold\fR" 4
.IX Item "-dts_delta_threshold"
Timestamp discontinuity delta threshold.
.IP "\fB\-muxdelay\fR \fIseconds\fR" 4
.IX Item "-muxdelay seconds"
Set the maximum demux-decode delay.
.IP "\fB\-muxpreload\fR \fIseconds\fR" 4
.IX Item "-muxpreload seconds"
Set the initial demux-decode delay.
.IP "\fB\-streamid\fR \fIoutput-stream-index\fR\fB:\fR\fInew-value\fR" 4
.IX Item "-streamid output-stream-index:new-value"
Assign a new value to a stream's stream-id field in the next output file.
All stream-id fields are reset to default for each output file.
.Sp
For example, to set the stream 0 \s-1PID\s0 to 33 and the stream 1 \s-1PID\s0 to 36 for
an output mpegts file:
.Sp
.Vb 1
\&        ffmpeg \-i infile \-streamid 0:33 \-streamid 1:36 out.ts
.Ve
.Sh "Preset files"
.IX Subsection "Preset files"
A preset file contains a sequence of \fIoption\fR=\fIvalue\fR pairs,
one for each line, specifying a sequence of options which would be
awkward to specify on the command line. Lines starting with the hash
('#') character are ignored and are used to provide comments. Check
the \fIffpresets\fR directory in the FFmpeg source tree for examples.
.PP
Preset files are specified with the \f(CW\*(C`vpre\*(C'\fR, \f(CW\*(C`apre\*(C'\fR,
\&\f(CW\*(C`spre\*(C'\fR, and \f(CW\*(C`fpre\*(C'\fR options. The \f(CW\*(C`fpre\*(C'\fR option takes the
filename of the preset instead of a preset name as input and can be
used for any kind of codec. For the \f(CW\*(C`vpre\*(C'\fR, \f(CW\*(C`apre\*(C'\fR, and
\&\f(CW\*(C`spre\*(C'\fR options, the options specified in a preset file are
applied to the currently selected codec of the same type as the preset
option.
.PP
The argument passed to the \f(CW\*(C`vpre\*(C'\fR, \f(CW\*(C`apre\*(C'\fR, and \f(CW\*(C`spre\*(C'\fR
preset options identifies the preset file to use according to the
following rules:
.PP
First ffmpeg searches for a file named \fIarg\fR.ffpreset in the
directories \fI\f(CI$FFMPEG_DATADIR\fI\fR (if set), and \fI\f(CI$HOME\fI/.ffmpeg\fR, and in
the datadir defined at configuration time (usually \fIPREFIX/share/ffmpeg\fR)
in that order. For example, if the argument is \f(CW\*(C`libx264\-max\*(C'\fR, it will
search for the file \fIlibx264\-max.ffpreset\fR.
.PP
If no such file is found, then ffmpeg will search for a file named
\&\fIcodec_name\fR\-\fIarg\fR.ffpreset in the above-mentioned
directories, where \fIcodec_name\fR is the name of the codec to which
the preset file options will be applied. For example, if you select
the video codec with \f(CW\*(C`\-vcodec libx264\*(C'\fR and use \f(CW\*(C`\-vpre max\*(C'\fR,
then it will search for the file \fIlibx264\-max.ffpreset\fR.
.SH "TIPS"
.IX Header "TIPS"
.IP "\(bu" 4
For streaming at very low bitrate application, use a low frame rate
and a small \s-1GOP\s0 size. This is especially true for RealVideo where
the Linux player does not seem to be very fast, so it can miss
frames. An example is:
.Sp
.Vb 1
\&        ffmpeg \-g 3 \-r 3 \-t 10 \-b 50k \-s qcif \-f rv10 /tmp/b.rm
.Ve
.IP "\(bu" 4
The parameter 'q' which is displayed while encoding is the current
quantizer. The value 1 indicates that a very good quality could
be achieved. The value 31 indicates the worst quality. If q=31 appears
too often, it means that the encoder cannot compress enough to meet
your bitrate. You must either increase the bitrate, decrease the
frame rate or decrease the frame size.
.IP "\(bu" 4
If your computer is not fast enough, you can speed up the
compression at the expense of the compression ratio. You can use
\&'\-me zero' to speed up motion estimation, and '\-intra' to disable
motion estimation completely (you have only I\-frames, which means it
is about as good as \s-1JPEG\s0 compression).
.IP "\(bu" 4
To have very low audio bitrates, reduce the sampling frequency
(down to 22050 Hz for \s-1MPEG\s0 audio, 22050 or 11025 for \s-1AC\-3\s0).
.IP "\(bu" 4
To have a constant quality (but a variable bitrate), use the option
\&'\-qscale n' when 'n' is between 1 (excellent quality) and 31 (worst
quality).
.IP "\(bu" 4
When converting video files, you can use the '\-sameq' option which
uses the same quality factor in the encoder as in the decoder.
It allows almost lossless encoding.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Sh "Video and Audio grabbing"
.IX Subsection "Video and Audio grabbing"
FFmpeg can grab video and audio from devices given that you specify the input
format and device.
.PP
.Vb 1
\&        ffmpeg \-f oss \-i /dev/dsp \-f video4linux2 \-i /dev/video0 /tmp/out.mpg
.Ve
.PP
Note that you must activate the right video source and channel before
launching FFmpeg with any \s-1TV\s0 viewer such as xawtv
(<\fBhttp://linux.bytesex.org/xawtv/\fR>) by Gerd Knorr. You also
have to set the audio recording levels correctly with a
standard mixer.
.Sh "X11 grabbing"
.IX Subsection "X11 grabbing"
FFmpeg can grab the X11 display.
.PP
.Vb 1
\&        ffmpeg \-f x11grab \-s cif \-r 25 \-i :0.0 /tmp/out.mpg
.Ve
.PP
0.0 is display.screen number of your X11 server, same as
the \s-1DISPLAY\s0 environment variable.
.PP
.Vb 1
\&        ffmpeg \-f x11grab \-s cif \-r 25 \-i :0.0+10,20 /tmp/out.mpg
.Ve
.PP
0.0 is display.screen number of your X11 server, same as the \s-1DISPLAY\s0 environment
variable. 10 is the x\-offset and 20 the y\-offset for the grabbing.
.Sh "Video and Audio file format conversion"
.IX Subsection "Video and Audio file format conversion"
* FFmpeg can use any supported file format and protocol as input:
.PP
Examples:
.PP
* You can use \s-1YUV\s0 files as input:
.PP
.Vb 1
\&        ffmpeg \-i /tmp/test%d.Y /tmp/out.mpg
.Ve
.PP
It will use the files:
.PP
.Vb 2
\&        /tmp/test0.Y, /tmp/test0.U, /tmp/test0.V,
\&        /tmp/test1.Y, /tmp/test1.U, /tmp/test1.V, etc...
.Ve
.PP
The Y files use twice the resolution of the U and V files. They are
raw files, without header. They can be generated by all decent video
decoders. You must specify the size of the image with the \fB\-s\fR option
if FFmpeg cannot guess it.
.PP
* You can input from a raw \s-1YUV420P\s0 file:
.PP
.Vb 1
\&        ffmpeg \-i /tmp/test.yuv /tmp/out.avi
.Ve
.PP
test.yuv is a file containing raw \s-1YUV\s0 planar data. Each frame is composed
of the Y plane followed by the U and V planes at half vertical and
horizontal resolution.
.PP
* You can output to a raw \s-1YUV420P\s0 file:
.PP
.Vb 1
\&        ffmpeg \-i mydivx.avi hugefile.yuv
.Ve
.PP
* You can set several input files and output files:
.PP
.Vb 1
\&        ffmpeg \-i /tmp/a.wav \-s 640x480 \-i /tmp/a.yuv /tmp/a.mpg
.Ve
.PP
Converts the audio file a.wav and the raw \s-1YUV\s0 video file a.yuv
to \s-1MPEG\s0 file a.mpg.
.PP
* You can also do audio and video conversions at the same time:
.PP
.Vb 1
\&        ffmpeg \-i /tmp/a.wav \-ar 22050 /tmp/a.mp2
.Ve
.PP
Converts a.wav to \s-1MPEG\s0 audio at 22050 Hz sample rate.
.PP
* You can encode to several formats at the same time and define a
mapping from input stream to output streams:
.PP
.Vb 1
\&        ffmpeg \-i /tmp/a.wav \-ab 64k /tmp/a.mp2 \-ab 128k /tmp/b.mp2 \-map 0:0 \-map 0:0
.Ve
.PP
Converts a.wav to a.mp2 at 64 kbits and to b.mp2 at 128 kbits. '\-map
file:index' specifies which input stream is used for each output
stream, in the order of the definition of output streams.
.PP
* You can transcode decrypted VOBs:
.PP
.Vb 1
\&        ffmpeg \-i snatch_1.vob \-f avi \-vcodec mpeg4 \-b 800k \-g 300 \-bf 2 \-acodec libmp3lame \-ab 128k snatch.avi
.Ve
.PP
This is a typical \s-1DVD\s0 ripping example; the input is a \s-1VOB\s0 file, the
output an \s-1AVI\s0 file with \s-1MPEG\-4\s0 video and \s-1MP3\s0 audio. Note that in this
command we use B\-frames so the \s-1MPEG\-4\s0 stream is DivX5 compatible, and
\&\s-1GOP\s0 size is 300 which means one intra frame every 10 seconds for 29.97fps
input video. Furthermore, the audio stream is MP3\-encoded so you need
to enable \s-1LAME\s0 support by passing \f(CW\*(C`\-\-enable\-libmp3lame\*(C'\fR to configure.
The mapping is particularly useful for \s-1DVD\s0 transcoding
to get the desired audio language.
.PP
\&\s-1NOTE:\s0 To see the supported input formats, use \f(CW\*(C`ffmpeg \-formats\*(C'\fR.
.PP
* You can extract images from a video, or create a video from many images:
.PP
For extracting images from a video:
.PP
.Vb 1
\&        ffmpeg \-i foo.avi \-r 1 \-s WxH \-f image2 foo\-%03d.jpeg
.Ve
.PP
This will extract one video frame per second from the video and will
output them in files named \fIfoo\-001.jpeg\fR, \fIfoo\-002.jpeg\fR,
etc. Images will be rescaled to fit the new WxH values.
.PP
If you want to extract just a limited number of frames, you can use the
above command in combination with the \-vframes or \-t option, or in
combination with \-ss to start extracting from a certain point in time.
.PP
For creating a video from many images:
.PP
.Vb 1
\&        ffmpeg \-f image2 \-i foo\-%03d.jpeg \-r 12 \-s WxH foo.avi
.Ve
.PP
The syntax \f(CW\*(C`foo\-%03d.jpeg\*(C'\fR specifies to use a decimal number
composed of three digits padded with zeroes to express the sequence
number. It is the same syntax supported by the C printf function, but
only formats accepting a normal integer are suitable.
.PP
* You can put many streams of the same type in the output:
.PP
.Vb 1
\&        ffmpeg \-i test1.avi \-i test2.avi \-vcodec copy \-acodec copy \-vcodec copy \-acodec copy test12.avi \-newvideo \-newaudio
.Ve
.PP
In addition to the first video and audio streams, the resulting
output file \fItest12.avi\fR will contain the second video
and the second audio stream found in the input streams list.
.PP
The \f(CW\*(C`\-newvideo\*(C'\fR, \f(CW\*(C`\-newaudio\*(C'\fR and \f(CW\*(C`\-newsubtitle\*(C'\fR
options have to be specified immediately after the name of the output
file to which you want to add them.
.SH "EXPRESSION EVALUATION"
.IX Header "EXPRESSION EVALUATION"
When evaluating an arithemetic expression, FFmpeg uses an internal
formula evaluator, implemented through the \fIlibavutil/eval.h\fR
interface.
.PP
An expression may contain unary, binary operators, constants, and
functions.
.PP
Two expressions \fIexpr1\fR and \fIexpr2\fR can be combined to form
another expression "\fIexpr1\fR;\fIexpr2\fR".
\&\fIexpr1\fR and \fIexpr2\fR are evaluated in turn, and the new
expression evaluates to the value of \fIexpr2\fR.
.PP
The following binary operators are available: \f(CW\*(C`+\*(C'\fR, \f(CW\*(C`\-\*(C'\fR,
\&\f(CW\*(C`*\*(C'\fR, \f(CW\*(C`/\*(C'\fR, \f(CW\*(C`^\*(C'\fR.
.PP
The following unary operators are available: \f(CW\*(C`+\*(C'\fR, \f(CW\*(C`\-\*(C'\fR.
.PP
The following functions are available:
.IP "\fBsinh(x)\fR" 4
.IX Item "sinh(x)"
.PD 0
.IP "\fBcosh(x)\fR" 4
.IX Item "cosh(x)"
.IP "\fBtanh(x)\fR" 4
.IX Item "tanh(x)"
.IP "\fBsin(x)\fR" 4
.IX Item "sin(x)"
.IP "\fBcos(x)\fR" 4
.IX Item "cos(x)"
.IP "\fBtan(x)\fR" 4
.IX Item "tan(x)"
.IP "\fBatan(x)\fR" 4
.IX Item "atan(x)"
.IP "\fBasin(x)\fR" 4
.IX Item "asin(x)"
.IP "\fBacos(x)\fR" 4
.IX Item "acos(x)"
.IP "\fBexp(x)\fR" 4
.IX Item "exp(x)"
.IP "\fBlog(x)\fR" 4
.IX Item "log(x)"
.IP "\fBabs(x)\fR" 4
.IX Item "abs(x)"
.IP "\fBsquish(x)\fR" 4
.IX Item "squish(x)"
.IP "\fBgauss(x)\fR" 4
.IX Item "gauss(x)"
.IP "\fBisnan(x)\fR" 4
.IX Item "isnan(x)"
.PD
Return 1.0 if \fIx\fR is \s-1NAN\s0, 0.0 otherwise.
.IP "\fBmod(x, y)\fR" 4
.IX Item "mod(x, y)"
.PD 0
.IP "\fBmax(x, y)\fR" 4
.IX Item "max(x, y)"
.IP "\fBmin(x, y)\fR" 4
.IX Item "min(x, y)"
.IP "\fBeq(x, y)\fR" 4
.IX Item "eq(x, y)"
.IP "\fBgte(x, y)\fR" 4
.IX Item "gte(x, y)"
.IP "\fBgt(x, y)\fR" 4
.IX Item "gt(x, y)"
.IP "\fBlte(x, y)\fR" 4
.IX Item "lte(x, y)"
.IP "\fBlt(x, y)\fR" 4
.IX Item "lt(x, y)"
.IP "\fBst(var, expr)\fR" 4
.IX Item "st(var, expr)"
.PD
Allow to store the value of the expression \fIexpr\fR in an internal
variable. \fIvar\fR specifies the number of the variable where to
store the value, and it is a value ranging from 0 to 9. The function
returns the value stored in the internal variable.
.IP "\fBld(var)\fR" 4
.IX Item "ld(var)"
Allow to load the value of the internal variable with number
\&\fIvar\fR, which was previosly stored with st(\fIvar\fR, \fIexpr\fR).
The function returns the loaded value.
.IP "\fBwhile(cond, expr)\fR" 4
.IX Item "while(cond, expr)"
Evaluate expression \fIexpr\fR while the expression \fIcond\fR is
non-zero, and returns the value of the last \fIexpr\fR evaluation, or
\&\s-1NAN\s0 if \fIcond\fR was always false.
.PP
Note that:
.PP
\&\f(CW\*(C`*\*(C'\fR works like \s-1AND\s0
.PP
\&\f(CW\*(C`+\*(C'\fR works like \s-1OR\s0
.PP
thus
.PP
.Vb 1
\&        if A then B else C
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&        A*B + not(A)*C
.Ve
.PP
When A evaluates to either 1 or 0, that is the same as
.PP
.Vb 1
\&        A*B + eq(A,0)*C
.Ve
.PP
In your C code, you can extend the list of unary and binary functions,
and define recognized constants, so that they are available for your
expressions.
.PP
The evaluator also recognizes the International System number
postfixes. If 'i' is appended after the postfix, powers of 2 are used
instead of powers of 10. The 'B' postfix multiplies the value for 8,
and can be appended after another postfix or used alone. This allows
using for example '\s-1KB\s0', 'MiB', 'G' and 'B' as postfix.
.PP
Follows the list of available International System postfixes, with
indication of the corresponding powers of 10 and of 2.
.IP "\fBy\fR" 4
.IX Item "y"
\&\-24 / \-80
.IP "\fBz\fR" 4
.IX Item "z"
\&\-21 / \-70
.IP "\fBa\fR" 4
.IX Item "a"
\&\-18 / \-60
.IP "\fBf\fR" 4
.IX Item "f"
\&\-15 / \-50
.IP "\fBp\fR" 4
.IX Item "p"
\&\-12 / \-40
.IP "\fBn\fR" 4
.IX Item "n"
\&\-9 / \-30
.IP "\fBu\fR" 4
.IX Item "u"
\&\-6 / \-20
.IP "\fBm\fR" 4
.IX Item "m"
\&\-3 / \-10
.IP "\fBc\fR" 4
.IX Item "c"
\&\-2
.IP "\fBd\fR" 4
.IX Item "d"
\&\-1
.IP "\fBh\fR" 4
.IX Item "h"
2
.IP "\fBk\fR" 4
.IX Item "k"
3 / 10
.IP "\fBK\fR" 4
.IX Item "K"
3 / 10
.IP "\fBM\fR" 4
.IX Item "M"
6 / 20
.IP "\fBG\fR" 4
.IX Item "G"
9 / 30
.IP "\fBT\fR" 4
.IX Item "T"
12 / 40
.IP "\fBP\fR" 4
.IX Item "P"
15 / 40
.IP "\fBE\fR" 4
.IX Item "E"
18 / 50
.IP "\fBZ\fR" 4
.IX Item "Z"
21 / 60
.IP "\fBY\fR" 4
.IX Item "Y"
24 / 70
.SH "INPUT DEVICES"
.IX Header "INPUT DEVICES"
Input devices are configured elements in FFmpeg which allow to access
the data coming from a multimedia device attached to your system.
.PP
When you configure your FFmpeg build, all the supported input devices
are enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-indevs\*(R".
.PP
You can disable all the input devices using the configure option
\&\*(L"\-\-disable\-indevs\*(R", and selectively enable an input device using the
option "\-\-enable\-indev=\fI\s-1INDEV\s0\fR\*(L", or you can disable a particular
input device using the option \*(R"\-\-disable\-indev=\fI\s-1INDEV\s0\fR".
.PP
The option \*(L"\-formats\*(R" of the ff* tools will display the list of
supported input devices (amongst the demuxers).
.PP
A description of the currently available input devices follows.
.Sh "alsa"
.IX Subsection "alsa"
\&\s-1ALSA\s0 (Advanced Linux Sound Architecture) input device.
.PP
To enable this input device during configuration you need libasound
installed on your system.
.PP
This device allows capturing from an \s-1ALSA\s0 device. The name of the
device to capture has to be an \s-1ALSA\s0 card identifier.
.PP
An \s-1ALSA\s0 identifier has the syntax:
.PP
.Vb 1
\&        hw:<CARD>[,<DEV>[,<SUBDEV>]]
.Ve
.PP
where the \fI\s-1DEV\s0\fR and \fI\s-1SUBDEV\s0\fR components are optional.
.PP
The three arguments (in order: \fI\s-1CARD\s0\fR,\fI\s-1DEV\s0\fR,\fI\s-1SUBDEV\s0\fR)
specify card number or identifier, device number and subdevice number
(\-1 means any).
.PP
To see the list of cards currently recognized by your system check the
files \fI/proc/asound/cards\fR and \fI/proc/asound/devices\fR.
.PP
For example to capture with \fIffmpeg\fR from an \s-1ALSA\s0 device with
card id 0, you may run the command:
.PP
.Vb 1
\&        ffmpeg \-f alsa \-i hw:0 alsaout.wav
.Ve
.PP
For more information see:
<\fBhttp://www.alsa\-project.org/alsa\-doc/alsa\-lib/pcm.html\fR>
.Sh "bktr"
.IX Subsection "bktr"
\&\s-1BSD\s0 video input device.
.Sh "dv1394"
.IX Subsection "dv1394"
Linux \s-1DV\s0 1394 input device.
.Sh "jack"
.IX Subsection "jack"
\&\s-1JACK\s0 input device.
.PP
To enable this input device during configuration you need libjack
installed on your system.
.PP
A \s-1JACK\s0 input device creates one or more \s-1JACK\s0 writable clients, one for
each audio channel, with name \fIclient_name\fR:input_\fIN\fR, where
\&\fIclient_name\fR is the name provided by the application, and \fIN\fR
is a number which identifies the channel.
Each writable client will send the acquired data to the FFmpeg input
device.
.PP
Once you have created one or more \s-1JACK\s0 readable clients, you need to
connect them to one or more \s-1JACK\s0 writable clients.
.PP
To connect or disconnect \s-1JACK\s0 clients you can use the
\&\fIjack_connect\fR and \fIjack_disconnect\fR programs, or do it
through a graphical interface, for example with \fIqjackctl\fR.
.PP
To list the \s-1JACK\s0 clients and their properties you can invoke the command
\&\fIjack_lsp\fR.
.PP
Follows an example which shows how to capture a \s-1JACK\s0 readable client
with \fIffmpeg\fR.
.PP
.Vb 2
\&        # Create a JACK writable client with name "ffmpeg".
\&        $ ffmpeg \-f jack \-i ffmpeg \-y out.wav
\&        
\&        # Start the sample jack_metro readable client.
\&        $ jack_metro \-b 120 \-d 0.2 \-f 4000
\&        
\&        # List the current JACK clients.
\&        $ jack_lsp \-c
\&        system:capture_1
\&        system:capture_2
\&        system:playback_1
\&        system:playback_2
\&        ffmpeg:input_1
\&        metro:120_bpm
\&        
\&        # Connect metro to the ffmpeg writable client.
\&        $ jack_connect metro:120_bpm ffmpeg:input_1
.Ve
.PP
For more information read:
<\fBhttp://jackaudio.org/\fR>
.Sh "libdc1394"
.IX Subsection "libdc1394"
\&\s-1IIDC1394\s0 input device, based on libdc1394 and libraw1394.
.Sh "oss"
.IX Subsection "oss"
Open Sound System input device.
.PP
The filename to provide to the input device is the device node
representing the \s-1OSS\s0 input device, and is usually set to
\&\fI/dev/dsp\fR.
.PP
For example to grab from \fI/dev/dsp\fR using \fIffmpeg\fR use the
command:
.PP
.Vb 1
\&        ffmpeg \-f oss \-i /dev/dsp /tmp/oss.wav
.Ve
.PP
For more information about \s-1OSS\s0 see:
<\fBhttp://manuals.opensound.com/usersguide/dsp.html\fR>
.Sh "video4linux and video4linux2"
.IX Subsection "video4linux and video4linux2"
Video4Linux and Video4Linux2 input video devices.
.PP
The name of the device to grab is a file device node, usually Linux
systems tend to automatically create such nodes when the device
(e.g. an \s-1USB\s0 webcam) is plugged into the system, and has a name of the
kind \fI/dev/video\fIN\fI\fR, where \fIN\fR is a number associated to
the device.
.PP
Video4Linux and Video4Linux2 devices only support a limited set of
\&\fIwidth\fRx\fIheight\fR sizes and framerates. You can check which are
supported for example with the command \fIdov4l\fR for Video4Linux
devices and the command \fIv4l\-info\fR for Video4Linux2 devices.
.PP
If the size for the device is set to 0x0, the input device will
try to autodetect the size to use.
.PP
Video4Linux support is deprecated since Linux 2.6.30, and will be
dropped in later versions.
.PP
Follow some usage examples of the video4linux devices with the ff*
tools.
.PP
.Vb 2
\&        # Grab and show the input of a video4linux device.
\&        ffplay \-s 320x240 \-f video4linux /dev/video0
\&        
\&        # Grab and show the input of a video4linux2 device, autoadjust size.
\&        ffplay \-f video4linux2 /dev/video0
\&        
\&        # Grab and record the input of a video4linux2 device, autoadjust size.
\&        ffmpeg \-f video4linux2 \-i /dev/video0 out.mpeg
.Ve
.Sh "vfwcap"
.IX Subsection "vfwcap"
VfW (Video for Windows) capture input device.
.PP
The filename passed as input is the capture driver number, ranging from
0 to 9. You may use \*(L"list\*(R" as filename to print a list of drivers. Any
other filename will be interpreted as device number 0.
.Sh "x11grab"
.IX Subsection "x11grab"
X11 video input device.
.PP
This device allows to capture a region of an X11 display.
.PP
The filename passed as input has the syntax:
.PP
.Vb 1
\&        [<hostname>]:<display_number>.<screen_number>[+<x_offset>,<y_offset>]
.Ve
.PP
\&\fIhostname\fR:\fIdisplay_number\fR.\fIscreen_number\fR specifies the
X11 display name of the screen to grab from. \fIhostname\fR can be
ommitted, and defaults to \*(L"localhost\*(R". The environment variable
\&\fB\s-1DISPLAY\s0\fR contains the default display name.
.PP
\&\fIx_offset\fR and \fIy_offset\fR specify the offsets of the grabbed
area with respect to the top-left border of the X11 screen. They
default to 0.
.PP
Check the X11 documentation (e.g. man X) for more detailed information.
.PP
Use the \fIdpyinfo\fR program for getting basic information about the
properties of your X11 display (e.g. grep for \*(L"name\*(R" or \*(L"dimensions\*(R").
.PP
For example to grab from \fI:0.0\fR using \fIffmpeg\fR:
.PP
.Vb 1
\&        ffmpeg \-f x11grab \-r 25 \-s cif \-i :0.0 out.mpg
\&        
\&        # Grab at position 10,20.
\&        ffmpeg \-f x11grab \-25 \-s cif \-i :0.0+10,20 out.mpg
.Ve
.SH "OUTPUT DEVICES"
.IX Header "OUTPUT DEVICES"
Output devices are configured elements in FFmpeg which allow to write
multimedia data to an output device attached to your system.
.PP
When you configure your FFmpeg build, all the supported output devices
are enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-outdevs\*(R".
.PP
You can disable all the output devices using the configure option
\&\*(L"\-\-disable\-outdevs\*(R", and selectively enable an output device using the
option "\-\-enable\-outdev=\fI\s-1OUTDEV\s0\fR\*(L", or you can disable a particular
input device using the option \*(R"\-\-disable\-outdev=\fI\s-1OUTDEV\s0\fR".
.PP
The option \*(L"\-formats\*(R" of the ff* tools will display the list of
enabled output devices (amongst the muxers).
.PP
A description of the currently available output devices follows.
.Sh "alsa"
.IX Subsection "alsa"
\&\s-1ALSA\s0 (Advanced Linux Sound Architecture) output device.
.Sh "oss"
.IX Subsection "oss"
\&\s-1OSS\s0 (Open Sound System) output device.
.SH "PROTOCOLS"
.IX Header "PROTOCOLS"
Protocols are configured elements in FFmpeg which allow to access
resources which require the use of a particular protocol.
.PP
When you configure your FFmpeg build, all the supported protocols are
enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-protocols\*(R".
.PP
You can disable all the protocols using the configure option
\&\*(L"\-\-disable\-protocols\*(R", and selectively enable a protocol using the
option "\-\-enable\-protocol=\fI\s-1PROTOCOL\s0\fR\*(L", or you can disable a
particular protocol using the option
\&\*(R"\-\-disable\-protocol=\fI\s-1PROTOCOL\s0\fR".
.PP
The option \*(L"\-protocols\*(R" of the ff* tools will display the list of
supported protocols.
.PP
A description of the currently available protocols follows.
.Sh "concat"
.IX Subsection "concat"
Physical concatenation protocol.
.PP
Allow to read and seek from many resource in sequence as if they were
a unique resource.
.PP
A \s-1URL\s0 accepted by this protocol has the syntax:
.PP
.Vb 1
\&        concat:<URL1>|<URL2>|...|<URLN>
.Ve
.PP
where \fI\s-1URL1\s0\fR, \fI\s-1URL2\s0\fR, ..., \fI\s-1URLN\s0\fR are the urls of the
resource to be concatenated, each one possibly specifying a distinct
protocol.
.PP
For example to read a sequence of files \fIsplit1.mpeg\fR,
\&\fIsplit2.mpeg\fR, \fIsplit3.mpeg\fR with \fIffplay\fR use the
command:
.PP
.Vb 1
\&        ffplay concat:split1.mpeg\e|split2.mpeg\e|split3.mpeg
.Ve
.PP
Note that you may need to escape the character \*(L"|\*(R" which is special for
many shells.
.Sh "file"
.IX Subsection "file"
File access protocol.
.PP
Allow to read from or read to a file.
.PP
For example to read from a file \fIinput.mpeg\fR with \fIffmpeg\fR
use the command:
.PP
.Vb 1
\&        ffmpeg \-i file:input.mpeg output.mpeg
.Ve
.PP
The ff* tools default to the file protocol, that is a resource
specified with the name \*(L"\s-1FILE\s0.mpeg\*(R" is interpreted as the \s-1URL\s0
\&\*(L"file:FILE.mpeg\*(R".
.Sh "gopher"
.IX Subsection "gopher"
Gopher protocol.
.Sh "http"
.IX Subsection "http"
\&\s-1HTTP\s0 (Hyper Text Transfer Protocol).
.Sh "mmst"
.IX Subsection "mmst"
\&\s-1MMS\s0 (Microsoft Media Server) protocol over \s-1TCP\s0.
.Sh "mmsh"
.IX Subsection "mmsh"
\&\s-1MMS\s0 (Microsoft Media Server) protocol over \s-1HTTP\s0.
.PP
The required syntax is:
.PP
.Vb 1
\&        mmsh://<server>[:<port>][/<app>][/<playpath>]
.Ve
.Sh "md5"
.IX Subsection "md5"
\&\s-1MD5\s0 output protocol.
.PP
Computes the \s-1MD5\s0 hash of the data to be written, and on close writes
this to the designated output or stdout if none is specified. It can
be used to test muxers without writing an actual file.
.PP
Some examples follow.
.PP
.Vb 2
\&        # Write the MD5 hash of the encoded AVI file to the file output.avi.md5.
\&        ffmpeg \-i input.flv \-f avi \-y md5:output.avi.md5
\&        
\&        # Write the MD5 hash of the encoded AVI file to stdout.
\&        ffmpeg \-i input.flv \-f avi \-y md5:
.Ve
.PP
Note that some formats (typically \s-1MOV\s0) require the output protocol to
be seekable, so they will fail with the \s-1MD5\s0 output protocol.
.Sh "pipe"
.IX Subsection "pipe"
\&\s-1UNIX\s0 pipe access protocol.
.PP
Allow to read and write from \s-1UNIX\s0 pipes.
.PP
The accepted syntax is:
.PP
.Vb 1
\&        pipe:[<number>]
.Ve
.PP
\&\fInumber\fR is the number corresponding to the file descriptor of the
pipe (e.g. 0 for stdin, 1 for stdout, 2 for stderr).  If \fInumber\fR
is not specified, by default the stdout file descriptor will be used
for writing, stdin for reading.
.PP
For example to read from stdin with \fIffmpeg\fR:
.PP
.Vb 3
\&        cat test.wav | ffmpeg \-i pipe:0
\&        # ...this is the same as...
\&        cat test.wav | ffmpeg \-i pipe:
.Ve
.PP
For writing to stdout with \fIffmpeg\fR:
.PP
.Vb 3
\&        ffmpeg \-i test.wav \-f avi pipe:1 | cat > test.avi
\&        # ...this is the same as...
\&        ffmpeg \-i test.wav \-f avi pipe: | cat > test.avi
.Ve
.PP
Note that some formats (typically \s-1MOV\s0), require the output protocol to
be seekable, so they will fail with the pipe output protocol.
.Sh "rtmp"
.IX Subsection "rtmp"
Real-Time Messaging Protocol.
.PP
The Real-Time Messaging Protocol (\s-1RTMP\s0) is used for streaming multimea\*^XX
dia content across a \s-1TCP/IP\s0 network.
.PP
The required syntax is:
.PP
.Vb 1
\&        rtmp://<server>[:<port>][/<app>][/<playpath>]
.Ve
.PP
The accepted parameters are:
.IP "\fBserver\fR" 4
.IX Item "server"
The address of the \s-1RTMP\s0 server.
.IP "\fBport\fR" 4
.IX Item "port"
The number of the \s-1TCP\s0 port to use (by default is 1935).
.IP "\fBapp\fR" 4
.IX Item "app"
It is the name of the application to access. It usually corresponds to
the path where the application is installed on the \s-1RTMP\s0 server
(e.g. \fI/ondemand/\fR, \fI/flash/live/\fR, etc.).
.IP "\fBplaypath\fR" 4
.IX Item "playpath"
It is the path or name of the resource to play with reference to the
application specified in \fIapp\fR, may be prefixed by \*(L"mp4:\*(R".
.PP
For example to read with \fIffplay\fR a multimedia resource named
\&\*(L"sample\*(R" from the application \*(L"vod\*(R" from an \s-1RTMP\s0 server \*(L"myserver\*(R":
.PP
.Vb 1
\&        ffplay rtmp://myserver/vod/sample
.Ve
.Sh "rtmp, rtmpe, rtmps, rtmpt, rtmpte"
.IX Subsection "rtmp, rtmpe, rtmps, rtmpt, rtmpte"
Real-Time Messaging Protocol and its variants supported through
librtmp.
.PP
Requires the presence of the librtmp headers and library during
configuration. You need to explicitely configure the build with
\&\*(L"\-\-enable\-librtmp\*(R". If enabled this will replace the native \s-1RTMP\s0
protocol.
.PP
This protocol provides most client functions and a few server
functions needed to support \s-1RTMP\s0, \s-1RTMP\s0 tunneled in \s-1HTTP\s0 (\s-1RTMPT\s0),
encrypted \s-1RTMP\s0 (\s-1RTMPE\s0), \s-1RTMP\s0 over \s-1SSL/TLS\s0 (\s-1RTMPS\s0) and tunneled
variants of these encrypted types (\s-1RTMPTE\s0, \s-1RTMPTS\s0).
.PP
The required syntax is:
.PP
.Vb 1
\&        <rtmp_proto>://<server>[:<port>][/<app>][/<playpath>] <options>
.Ve
.PP
where \fIrtmp_proto\fR is one of the strings \*(L"rtmp\*(R", \*(L"rtmpt\*(R", \*(L"rtmpe\*(R",
\&\*(L"rtmps\*(R", \*(L"rtmpte\*(R", \*(L"rtmpts\*(R" corresponding to each \s-1RTMP\s0 variant, and
\&\fIserver\fR, \fIport\fR, \fIapp\fR and \fIplaypath\fR have the same
meaning as specified for the \s-1RTMP\s0 native protocol.
\&\fIoptions\fR contains a list of space-separated options of the form
\&\fIkey\fR=\fIval\fR.
.PP
See the librtmp manual page (man 3 librtmp) for more information.
.PP
For example, to stream a file in real-time to an \s-1RTMP\s0 server using
\&\fIffmpeg\fR:
.PP
.Vb 1
\&        ffmpeg \-re \-i myfile \-f flv rtmp://myserver/live/mystream
.Ve
.PP
To play the same stream using \fIffplay\fR:
.PP
.Vb 1
\&        ffplay "rtmp://myserver/live/mystream live=1"
.Ve
.Sh "rtp"
.IX Subsection "rtp"
Real-Time Protocol.
.Sh "rtsp"
.IX Subsection "rtsp"
\&\s-1RTSP\s0 is not technically a protocol handler in libavformat, it is a demuxer
and muxer. The demuxer supports both normal \s-1RTSP\s0 (with data transferred
over \s-1RTP\s0; this is used by e.g. Apple and Microsoft) and Real-RTSP (with
data transferred over \s-1RDT\s0).
.PP
The muxer can be used to send a stream using \s-1RTSP\s0 \s-1ANNOUNCE\s0 to a server
supporting it (currently Darwin Streaming Server and Mischa Spiegelmock's
\&\s-1RTSP\s0 server, <\fBhttp://github.com/revmischa/rtsp\-server\fR>).
.PP
The required syntax for a \s-1RTSP\s0 url is:
.PP
.Vb 1
\&        rtsp://<hostname>[:<port>]/<path>[?<options>]
.Ve
.PP
\&\fIoptions\fR is a \f(CW\*(C`&\*(C'\fR\-separated list. The following options
are supported:
.IP "\fBudp\fR" 4
.IX Item "udp"
Use \s-1UDP\s0 as lower transport protocol.
.IP "\fBtcp\fR" 4
.IX Item "tcp"
Use \s-1TCP\s0 (interleaving within the \s-1RTSP\s0 control channel) as lower
transport protocol.
.IP "\fBmulticast\fR" 4
.IX Item "multicast"
Use \s-1UDP\s0 multicast as lower transport protocol.
.IP "\fBhttp\fR" 4
.IX Item "http"
Use \s-1HTTP\s0 tunneling as lower transport protocol, which is useful for
passing proxies.
.PP
Multiple lower transport protocols may be specified, in that case they are
tried one at a time (if the setup of one fails, the next one is tried).
For the muxer, only the \f(CW\*(C`tcp\*(C'\fR and \f(CW\*(C`udp\*(C'\fR options are supported.
.PP
When receiving data over \s-1UDP\s0, the demuxer tries to reorder received packets
(since they may arrive out of order, or packets may get lost totally). In
order for this to be enabled, a maximum delay must be specified in the
\&\f(CW\*(C`max_delay\*(C'\fR field of AVFormatContext.
.PP
When watching multi-bitrate Real-RTSP streams with \fIffplay\fR, the
streams to display can be chosen with \f(CW\*(C`\-vst\*(C'\fR \fIn\fR and
\&\f(CW\*(C`\-ast\*(C'\fR \fIn\fR for video and audio respectively, and can be switched
on the fly by pressing \f(CW\*(C`v\*(C'\fR and \f(CW\*(C`a\*(C'\fR.
.PP
Example command lines:
.PP
To watch a stream over \s-1UDP\s0, with a max reordering delay of 0.5 seconds:
.PP
.Vb 1
\&        ffplay \-max_delay 500000 rtsp://server/video.mp4?udp
.Ve
.PP
To watch a stream tunneled over \s-1HTTP:\s0
.PP
.Vb 1
\&        ffplay rtsp://server/video.mp4?http
.Ve
.PP
To send a stream in realtime to a \s-1RTSP\s0 server, for others to watch:
.PP
.Vb 1
\&        ffmpeg \-re \-i <input> \-f rtsp \-muxdelay 0.1 rtsp://server/live.sdp
.Ve
.Sh "sap"
.IX Subsection "sap"
Session Announcement Protocol (\s-1RFC\s0 2974). This is not technically a
protocol handler in libavformat, it is a muxer and demuxer.
It is used for signalling of \s-1RTP\s0 streams, by announcing the \s-1SDP\s0 for the
streams regularly on a separate port.
.PP
\fIMuxer\fR
.IX Subsection "Muxer"
.PP
The syntax for a \s-1SAP\s0 url given to the muxer is:
.PP
.Vb 1
\&        sap://<destination>[:<port>][?<options>]
.Ve
.PP
The \s-1RTP\s0 packets are sent to \fIdestination\fR on port \fIport\fR,
or to port 5004 if no port is specified.
\&\fIoptions\fR is a \f(CW\*(C`&\*(C'\fR\-separated list. The following options
are supported:
.IP "\fBannounce_addr=\fR\fIaddress\fR" 4
.IX Item "announce_addr=address"
Specify the destination \s-1IP\s0 address for sending the announcements to.
If omitted, the announcements are sent to the commonly used \s-1SAP\s0
announcement multicast address 224.2.127.254 (sap.mcast.net), or
ff0e::2:7ffe if \fIdestination\fR is an IPv6 address.
.IP "\fBannounce_port=\fR\fIport\fR" 4
.IX Item "announce_port=port"
Specify the port to send the announcements on, defaults to
9875 if not specified.
.IP "\fBttl=\fR\fIttl\fR" 4
.IX Item "ttl=ttl"
Specify the time to live value for the announcements and \s-1RTP\s0 packets,
defaults to 255.
.IP "\fBsame_port=\fR\fI0|1\fR" 4
.IX Item "same_port=0|1"
If set to 1, send all \s-1RTP\s0 streams on the same port pair. If zero (the
default), all streams are sent on unique ports, with each stream on a
port 2 numbers higher than the previous.
VLC/Live555 requires this to be set to 1, to be able to receive the stream.
The \s-1RTP\s0 stack in libavformat for receiving requires all streams to be sent
on unique ports.
.PP
Example command lines follow.
.PP
To broadcast a stream on the local subnet, for watching in \s-1VLC:\s0
.PP
.Vb 1
\&        ffmpeg \-re \-i <input> \-f sap sap://224.0.0.255?same_port=1
.Ve
.PP
Similarly, for watching in ffplay:
.PP
.Vb 1
\&        ffmpeg \-re \-i <input> \-f sap sap://224.0.0.255
.Ve
.PP
And for watching in ffplay, over IPv6:
.PP
.Vb 1
\&        ffmpeg \-re \-i <input> \-f sap sap://[ff0e::1:2:3:4]
.Ve
.PP
\fIDemuxer\fR
.IX Subsection "Demuxer"
.PP
The syntax for a \s-1SAP\s0 url given to the demuxer is:
.PP
.Vb 1
\&        sap://[<address>][:<port>]
.Ve
.PP
\&\fIaddress\fR is the multicast address to listen for announcements on,
if omitted, the default 224.2.127.254 (sap.mcast.net) is used. \fIport\fR
is the port that is listened on, 9875 if omitted.
.PP
The demuxers listens for announcements on the given address and port.
Once an announcement is received, it tries to receive that particular stream.
.PP
Example command lines follow.
.PP
To play back the first stream announced on the normal \s-1SAP\s0 multicast address:
.PP
.Vb 1
\&        ffplay sap://
.Ve
.PP
To play back the first stream announced on one the default IPv6 \s-1SAP\s0 multicast address:
.PP
.Vb 1
\&        ffplay sap://[ff0e::2:7ffe]
.Ve
.Sh "tcp"
.IX Subsection "tcp"
Trasmission Control Protocol.
.Sh "udp"
.IX Subsection "udp"
User Datagram Protocol.
.PP
The required syntax for a \s-1UDP\s0 url is:
.PP
.Vb 1
\&        udp://<hostname>:<port>[?<options>]
.Ve
.PP
\&\fIoptions\fR contains a list of &\-seperated options of the form \fIkey\fR=\fIval\fR.
Follow the list of supported options.
.IP "\fBbuffer_size=\fR\fIsize\fR" 4
.IX Item "buffer_size=size"
set the \s-1UDP\s0 buffer size in bytes
.IP "\fBlocalport=\fR\fIport\fR" 4
.IX Item "localport=port"
override the local \s-1UDP\s0 port to bind with
.IP "\fBpkt_size=\fR\fIsize\fR" 4
.IX Item "pkt_size=size"
set the size in bytes of \s-1UDP\s0 packets
.IP "\fBreuse=\fR\fI1|0\fR" 4
.IX Item "reuse=1|0"
explicitly allow or disallow reusing \s-1UDP\s0 sockets
.IP "\fBttl=\fR\fIttl\fR" 4
.IX Item "ttl=ttl"
set the time to live value (for multicast only)
.IP "\fBconnect=\fR\fI1|0\fR" 4
.IX Item "connect=1|0"
Initialize the \s-1UDP\s0 socket with \f(CW\*(C`connect()\*(C'\fR. In this case, the
destination address can't be changed with udp_set_remote_url later.
This allows finding out the source address for the packets with getsockname,
and makes writes return with \s-1AVERROR\s0(\s-1ECONNREFUSED\s0) if \*(L"destination
unreachable\*(R" is received.
.PP
Some usage examples of the udp protocol with \fIffmpeg\fR follow.
.PP
To stream over \s-1UDP\s0 to a remote endpoint:
.PP
.Vb 1
\&        ffmpeg \-i <input> \-f <format> udp://<hostname>:<port>
.Ve
.PP
To stream in mpegts format over \s-1UDP\s0 using 188 sized \s-1UDP\s0 packets, using a large input buffer:
.PP
.Vb 1
\&        ffmpeg \-i <input> \-f mpegts udp://<hostname>:<port>?pkt_size=188&buffer_size=65535
.Ve
.PP
To receive over \s-1UDP\s0 from a remote endpoint:
.PP
.Vb 1
\&        ffmpeg \-i udp://[<multicast\-address>]:<port>
.Ve
.SH "BITSTREAM FILTERS"
.IX Header "BITSTREAM FILTERS"
When you configure your FFmpeg build, all the supported bitstream
filters are enabled by default. You can list all available ones using
the configure option \f(CW\*(C`\-\-list\-bsfs\*(C'\fR.
.PP
You can disable all the bitstream filters using the configure option
\&\f(CW\*(C`\-\-disable\-bsfs\*(C'\fR, and selectively enable any bitstream filter using
the option \f(CW\*(C`\-\-enable\-bsf=BSF\*(C'\fR, or you can disable a particular
bitstream filter using the option \f(CW\*(C`\-\-disable\-bsf=BSF\*(C'\fR.
.PP
The option \f(CW\*(C`\-bsfs\*(C'\fR of the ff* tools will display the list of
all the supported bitstream filters included in your build.
.PP
Below is a description of the currently available bitstream filters.
.Sh "aac_adtstoasc"
.IX Subsection "aac_adtstoasc"
.Sh "chomp"
.IX Subsection "chomp"
.Sh "dump_extradata"
.IX Subsection "dump_extradata"
.Sh "h264_mp4toannexb"
.IX Subsection "h264_mp4toannexb"
.Sh "imx_dump_header"
.IX Subsection "imx_dump_header"
.Sh "mjpeg2jpeg"
.IX Subsection "mjpeg2jpeg"
Convert \s-1MJPEG/AVI1\s0 packets to full \s-1JPEG/JFIF\s0 packets.
.PP
\&\s-1MJPEG\s0 is a video codec wherein each video frame is essentially a
\&\s-1JPEG\s0 image. The individual frames can be extracted without loss,
e.g. by
.PP
.Vb 1
\&        ffmpeg \-i ../some_mjpeg.avi \-vcodec copy frames_%d.jpg
.Ve
.PP
Unfortunately, these chunks are incomplete \s-1JPEG\s0 images, because
they lack the \s-1DHT\s0 segment required for decoding. Quoting from
<\fBhttp://www.digitalpreservation.gov/formats/fdd/fdd000063.shtml\fR>:
.PP
Avery Lee, writing in the rec.video.desktop newsgroup in 2001,
commented that \*(L"\s-1MJPEG\s0, or at least the \s-1MJPEG\s0 in AVIs having the
\&\s-1MJPG\s0 fourcc, is restricted \s-1JPEG\s0 with a fixed \*(-- and *omitted* \*(--
Huffman table. The \s-1JPEG\s0 must be YCbCr colorspace, it must be 4:2:2,
and it must use basic Huffman encoding, not arithmetic or
progressive. . . . You can indeed extract the \s-1MJPEG\s0 frames and
decode them with a regular \s-1JPEG\s0 decoder, but you have to prepend
the \s-1DHT\s0 segment to them, or else the decoder won't have any idea
how to decompress the data. The exact table necessary is given in
the OpenDML spec.\*(R"
.PP
This bitstream filter patches the header of frames extracted from an \s-1MJPEG\s0
stream (carrying the \s-1AVI1\s0 header \s-1ID\s0 and lacking a \s-1DHT\s0 segment) to
produce fully qualified \s-1JPEG\s0 images.
.PP
.Vb 3
\&        ffmpeg \-i mjpeg\-movie.avi \-vcodec copy \-vbsf mjpeg2jpeg frame_%d.jpg
\&        exiftran \-i \-9 frame*.jpg
\&        ffmpeg \-i frame_%d.jpg \-vcodec copy rotated.avi
.Ve
.Sh "mjpega_dump_header"
.IX Subsection "mjpega_dump_header"
.Sh "movsub"
.IX Subsection "movsub"
.Sh "mp3_header_compress"
.IX Subsection "mp3_header_compress"
.Sh "mp3_header_decompress"
.IX Subsection "mp3_header_decompress"
.Sh "noise"
.IX Subsection "noise"
.Sh "remove_extradata"
.IX Subsection "remove_extradata"
.SH "FILTERGRAPH DESCRIPTION"
.IX Header "FILTERGRAPH DESCRIPTION"
A filtergraph is a directed graph of connected filters. It can contain
cycles, and there can be multiple links between a pair of
filters. Each link has one input pad on one side connecting it to one
filter from which it takes its input, and one output pad on the other
side connecting it to the one filter accepting its output.
.PP
Each filter in a filtergraph is an instance of a filter class
registered in the application, which defines the features and the
number of input and output pads of the filter.
.PP
A filter with no input pads is called a \*(L"source\*(R", a filter with no
output pads is called a \*(L"sink\*(R".
.Sh "Filtergraph syntax"
.IX Subsection "Filtergraph syntax"
A filtergraph can be represented using a textual representation, which
is recognized by the \f(CW\*(C`\-vf\*(C'\fR and \f(CW\*(C`\-af\*(C'\fR options of the ff*
tools, and by the \f(CW\*(C`av_parse_graph()\*(C'\fR function defined in
\&\fIlibavfilter/avfiltergraph\fR.
.PP
A filterchain consists of a sequence of connected filters, each one
connected to the previous one in the sequence. A filterchain is
represented by a list of \*(L",\*(R"\-separated filter descriptions.
.PP
A filtergraph consists of a sequence of filterchains. A sequence of
filterchains is represented by a list of \*(L";\*(R"\-separated filterchain
descriptions.
.PP
A filter is represented by a string of the form:
[\fIin_link_1\fR]...[\fIin_link_N\fR]\fIfilter_name\fR=\fIarguments\fR[\fIout_link_1\fR]...[\fIout_link_M\fR]
.PP
\&\fIfilter_name\fR is the name of the filter class of which the
described filter is an instance of, and has to be the name of one of
the filter classes registered in the program.
The name of the filter class is optionally followed by a string
"=\fIarguments\fR".
.PP
\&\fIarguments\fR is a string which contains the parameters used to
initialize the filter instance, and are described in the filter
descriptions below.
.PP
The list of arguments can be quoted using the character \*(L"'\*(R" as initial
and ending mark, and the character '\e' for escaping the characters
within the quoted text; otherwise the argument string is considered
terminated when the next special character (belonging to the set
\&\*(L"[]=;,\*(R") is encountered.
.PP
The name and arguments of the filter are optionally preceded and
followed by a list of link labels.
A link label allows to name a link and associate it to a filter output
or input pad. The preceding labels \fIin_link_1\fR
\&... \fIin_link_N\fR, are associated to the filter input pads,
the following labels \fIout_link_1\fR ... \fIout_link_M\fR, are
associated to the output pads.
.PP
When two link labels with the same name are found in the
filtergraph, a link between the corresponding input and output pad is
created.
.PP
If an output pad is not labelled, it is linked by default to the first
unlabelled input pad of the next filter in the filterchain.
For example in the filterchain:
.PP
.Vb 1
\&        nullsrc, split[L1], [L2]overlay, nullsink
.Ve
.PP
the split filter instance has two output pads, and the overlay filter
instance two input pads. The first output pad of split is labelled
\&\*(L"L1\*(R", the first input pad of overlay is labelled \*(L"L2\*(R", and the second
output pad of split is linked to the second input pad of overlay,
which are both unlabelled.
.PP
In a complete filterchain all the unlabelled filter input and output
pads must be connected. A filtergraph is considered valid if all the
filter input and output pads of all the filterchains are connected.
.PP
Follows a \s-1BNF\s0 description for the filtergraph syntax:
.PP
.Vb 7
\&        <NAME>             ::= sequence of alphanumeric characters and \*(Aq_\*(Aq
\&        <LINKLABEL>        ::= "[" <NAME> "]"
\&        <LINKLABELS>       ::= <LINKLABEL> [<LINKLABELS>]
\&        <FILTER_ARGUMENTS> ::= sequence of chars (eventually quoted)
\&        <FILTER>           ::= [<LINKNAMES>] <NAME> ["=" <ARGUMENTS>] [<LINKNAMES>]
\&        <FILTERCHAIN>      ::= <FILTER> [,<FILTERCHAIN>]
\&        <FILTERGRAPH>      ::= <FILTERCHAIN> [;<FILTERGRAPH>]
.Ve
.SH "AUDIO FILTERS"
.IX Header "AUDIO FILTERS"
When you configure your FFmpeg build, you can disable any of the
existing filters using \-\-disable\-filters.
The configure output will show the audio filters included in your
build.
.PP
Below is a description of the currently available audio filters.
.Sh "anull"
.IX Subsection "anull"
Pass the audio source unchanged to the output.
.SH "AUDIO SOURCES"
.IX Header "AUDIO SOURCES"
Below is a description of the currently available audio sources.
.Sh "anullsrc"
.IX Subsection "anullsrc"
Null audio source, never return audio frames. It is mainly useful as a
template and to be employed in analysis / debugging tools.
.PP
It accepts as optional parameter a string of the form
\&\fIsample_rate\fR:\fIchannel_layout\fR.
.PP
\&\fIsample_rate\fR specify the sample rate, and defaults to 44100.
.PP
\&\fIchannel_layout\fR specify the channel layout, and can be either an
integer or a string representing a channel layout. The default value
of \fIchannel_layout\fR is 3, which corresponds to \s-1CH_LAYOUT_STEREO\s0.
.PP
Check the channel_layout_map definition in
\&\fIlibavcodec/audioconvert.c\fR for the mapping between strings and
channel layout values.
.PP
Follow some examples:
.PP
.Vb 2
\&        #  set the sample rate to 48000 Hz and the channel layout to CH_LAYOUT_MONO.
\&        anullsrc=48000:4
\&        
\&        # same as
\&        anullsrc=48000:mono
.Ve
.SH "AUDIO SINKS"
.IX Header "AUDIO SINKS"
Below is a description of the currently available audio sinks.
.Sh "anullsink"
.IX Subsection "anullsink"
Null audio sink, do absolutely nothing with the input audio. It is
mainly useful as a template and to be employed in analysis / debugging
tools.
.SH "VIDEO FILTERS"
.IX Header "VIDEO FILTERS"
When you configure your FFmpeg build, you can disable any of the
existing filters using \-\-disable\-filters.
The configure output will show the video filters included in your
build.
.PP
Below is a description of the currently available video filters.
.Sh "blackframe"
.IX Subsection "blackframe"
Detect frames that are (almost) completely black. Can be useful to
detect chapter transitions or commercials. Output lines consist of
the frame number of the detected frame, the percentage of blackness,
the position in the file if known or \-1 and the timestamp in seconds.
.PP
In order to display the output lines, you need to set the loglevel at
least to the \s-1AV_LOG_INFO\s0 value.
.PP
The filter accepts the syntax:
.PP
.Vb 1
\&        blackframe[=<amount>:[<threshold>]]
.Ve
.PP
\&\fIamount\fR is the percentage of the pixels that have to be below the
threshold, and defaults to 98.
.PP
\&\fIthreshold\fR is the threshold below which a pixel value is
considered black, and defaults to 32.
.Sh "crop"
.IX Subsection "crop"
Crop the input video to \fIout_w\fR:\fIout_h\fR:\fIx\fR:\fIy\fR.
.PP
The parameters are expressions containing the following constants:
.IP "\fBE, \s-1PI\s0, \s-1PHI\s0\fR" 4
.IX Item "E, PI, PHI"
the corresponding mathematical approximated values for e
(euler number), pi (greek \s-1PI\s0), \s-1PHI\s0 (golden ratio)
.IP "\fBx, y\fR" 4
.IX Item "x, y"
the computed values for \fIx\fR and \fIy\fR. They are evaluated for
each new frame.
.IP "\fBin_w, in_h\fR" 4
.IX Item "in_w, in_h"
the input width and heigth
.IP "\fBiw, ih\fR" 4
.IX Item "iw, ih"
same as \fIin_w\fR and \fIin_h\fR
.IP "\fBout_w, out_h\fR" 4
.IX Item "out_w, out_h"
the output (cropped) width and heigth
.IP "\fBow, oh\fR" 4
.IX Item "ow, oh"
same as \fIout_w\fR and \fIout_h\fR
.IP "\fBn\fR" 4
.IX Item "n"
the number of input frame, starting from 0
.IP "\fBpos\fR" 4
.IX Item "pos"
the position in the file of the input frame, \s-1NAN\s0 if unknown
.IP "\fBt\fR" 4
.IX Item "t"
timestamp expressed in seconds, \s-1NAN\s0 if the input timestamp is unknown
.PP
The \fIout_w\fR and \fIout_h\fR parameters specify the expressions for
the width and height of the output (cropped) video. They are
evaluated just at the configuration of the filter.
.PP
The default value of \fIout_w\fR is \*(L"in_w\*(R", and the default value of
\&\fIout_h\fR is \*(L"in_h\*(R".
.PP
The expression for \fIout_w\fR may depend on the value of \fIout_h\fR,
and the expression for \fIout_h\fR may depend on \fIout_w\fR, but they
cannot depend on \fIx\fR and \fIy\fR, as \fIx\fR and \fIy\fR are
evaluated after \fIout_w\fR and \fIout_h\fR.
.PP
The \fIx\fR and \fIy\fR parameters specify the expressions for the
position of the top-left corner of the output (non-cropped) area. They
are evaluated for each frame. If the evaluated value is not valid, it
is approximated to the nearest valid value.
.PP
The default value of \fIx\fR is \*(L"(in_w\-out_w)/2\*(R", and the default
value for \fIy\fR is \*(L"(in_h\-out_h)/2\*(R", which set the cropped area at
the center of the input image.
.PP
The expression for \fIx\fR may depend on \fIy\fR, and the expression
for \fIy\fR may depend on \fIx\fR.
.PP
Follow some examples:
.PP
.Vb 2
\&        # crop the central input area with size 100x100
\&        crop=100:100
\&        
\&        # crop the central input area with size 2/3 of the input video
\&        "crop=2/3*in_w:2/3*in_h"
\&        
\&        # crop the input video central square
\&        crop=in_h
\&        
\&        # delimit the rectangle with the top\-left corner placed at position
\&        # 100:100 and the right\-bottom corner corresponding to the right\-bottom
\&        # corner of the input image.
\&        crop=in_w\-100:in_h\-100:100:100
\&        
\&        # crop 10 pixels from the lefth and right borders, and 20 pixels from
\&        # the top and bottom borders
\&        "crop=in_w\-2*10:in_h\-2*20"
\&        
\&        # keep only the bottom right quarter of the input image
\&        "crop=in_w/2:in_h/2:in_w/2:in_h/2"
\&        
\&        # crop height for getting Greek harmony
\&        "crop=in_w:1/PHI*in_w"
\&        
\&        # trembling effect
\&        "crop=in_w/2:in_h/2:(in_w\-out_w)/2+((in_w\-out_w)/2)*sin(n/10):(in_h\-out_h)/2 +((in_h\-out_h)/2)*sin(n/7)"
\&        
\&        # erratic camera effect depending on timestamp and position
\&        "crop=in_w/2:in_h/2:(in_w\-out_w)/2+((in_w\-out_w)/2)*sin(t*10):(in_h\-out_h)/2 +((in_h\-out_h)/2)*sin(t*13)"
\&        
\&        # set x depending on the value of y
\&        "crop=in_w/2:in_h/2:y:10+10*sin(n/10)"
.Ve
.Sh "cropdetect"
.IX Subsection "cropdetect"
Auto-detect crop size.
.PP
Calculate necessary cropping parameters and prints the recommended
parameters through the logging system. The detected dimensions
correspond to the non-black area of the input video.
.PP
It accepts the syntax:
.PP
.Vb 1
\&        cropdetect[=<limit>[:<round>[:<reset>]]]
.Ve
.IP "\fBlimit\fR" 4
.IX Item "limit"
Threshold, which can be optionally specified from nothing (0) to
everything (255), defaults to 24.
.IP "\fBround\fR" 4
.IX Item "round"
Value which the width/height should be divisible by, defaults to
16. The offset is automatically adjusted to center the video. Use 2 to
get only even dimensions (needed for 4:2:2 video). 16 is best when
encoding to most video codecs.
.IP "\fBreset\fR" 4
.IX Item "reset"
Counter that determines after how many frames cropdetect will reset
the previously detected largest video area and start over to detect
the current optimal crop area. Defaults to 0.
.Sp
This can be useful when channel logos distort the video area. 0
indicates never reset and return the largest area encountered during
playback.
.Sh "drawbox"
.IX Subsection "drawbox"
Draw a colored box on the input image.
.PP
It accepts the syntax:
.PP
.Vb 1
\&        drawbox=<x>:<y>:<width>:<height>:<color>
.Ve
.IP "\fBx, y\fR" 4
.IX Item "x, y"
Specify the top left corner coordinates of the box. Default to 0.
.IP "\fBwidth, height\fR" 4
.IX Item "width, height"
Specify the width and height of the box, if 0 they are interpreted as
the input width and height. Default to 0.
.IP "\fBcolor\fR" 4
.IX Item "color"
Specify the color of the box to write, it can be the name of a color
(case insensitive match) or a 0xRRGGBB[\s-1AA\s0] sequence.
.PP
Follow some examples:
.PP
.Vb 2
\&        # draw a black box around the edge of the input image
\&        drawbox
\&        
\&        # draw a box with color red and an opacity of 50%
\&        drawbox=10:20:200:60:red@0.5"
.Ve
.Sh "fifo"
.IX Subsection "fifo"
Buffer input images and send them when they are requested.
.PP
This filter is mainly useful when auto-inserted by the libavfilter
framework.
.PP
The filter does not take parameters.
.Sh "format"
.IX Subsection "format"
Convert the input video to one of the specified pixel formats.
Libavfilter will try to pick one that is supported for the input to
the next filter.
.PP
The filter accepts a list of pixel format names, separated by \*(L":\*(R",
for example \*(L"yuv420p:monow:rgb24\*(R".
.PP
The following command:
.PP
.Vb 1
\&        ./ffmpeg \-i in.avi \-vf "format=yuv420p" out.avi
.Ve
.PP
will convert the input video to the format \*(L"yuv420p\*(R".
.Sh "frei0r"
.IX Subsection "frei0r"
Apply a frei0r effect to the input video.
.PP
To enable compilation of this filter you need to install the frei0r
header and configure FFmpeg with \-\-enable\-frei0r.
.PP
The filter supports the syntax:
.PP
.Vb 1
\&        <filter_name>[{:|=}<param1>:<param2>:...:<paramN>]
.Ve
.PP
\&\fIfilter_name\fR is the name to the frei0r effect to load. If the
environment variable \fB\s-1FREI0R_PATH\s0\fR is defined, the frei0r effect
is searched in each one of the directories specified by the colon
separated list in \fB\s-1FREIOR_PATH\s0\fR, otherwise in the standard frei0r
paths, which are in this order: \fI\s-1HOME/\s0.frei0r\-1/lib/\fR,
\&\fI/usr/local/lib/frei0r\-1/\fR, \fI/usr/lib/frei0r\-1/\fR.
.PP
\&\fIparam1\fR, \fIparam2\fR, ... , \fIparamN\fR specify the parameters
for the frei0r effect.
.PP
A frei0r effect parameter can be a boolean (whose values are specified
with \*(L"y\*(R" and \*(L"n\*(R"), a double, a color (specified by the syntax
\&\fIR\fR/\fIG\fR/\fIB\fR, \fIR\fR, \fIG\fR, and \fIB\fR being float
numbers from 0.0 to 1.0) or by an \f(CW\*(C`av_parse_color()\*(C'\fR color
description), a position (specified by the syntax \fIX\fR/\fIY\fR,
\&\fIX\fR and \fIY\fR being float numbers) and a string.
.PP
The number and kind of parameters depend on the loaded effect. If an
effect parameter is not specified the default value is set.
.PP
Some examples follow:
.PP
.Vb 2
\&        # apply the distort0r effect, set the first two double parameters
\&        frei0r=distort0r:0.5:0.01
\&        
\&        # apply the colordistance effect, takes a color as first parameter
\&        frei0r=colordistance:0.2/0.3/0.4
\&        frei0r=colordistance:violet
\&        frei0r=colordistance:0x112233
\&        
\&        # apply the perspective effect, specify the top left and top right
\&        # image positions
\&        frei0r=perspective:0.2/0.2:0.8/0.2
.Ve
.PP
For more information see:
<\fBhttp://piksel.org/frei0r\fR>
.Sh "gradfun"
.IX Subsection "gradfun"
Fix the banding artifacts that are sometimes introduced into nearly flat
regions by truncation to 8bit colordepth.
Interpolate the gradients that should go where the bands are, and
dither them.
.PP
The filter takes two optional parameters, separated by ':':
\&\fIstrength\fR:\fIradius\fR
.PP
\&\fIstrength\fR is the maximum amount by which the filter will change
any one pixel. Also the threshold for detecting nearly flat
regions. Acceptable values range from .51 to 255, default value is
1.2, out-of-range values will be clipped to the valid range.
.PP
\&\fIradius\fR is the neighborhood to fit the gradient to. A larger
radius makes for smoother gradients, but also prevents the filter from
modifying the pixels near detailed regions. Acceptable values are
8\-32, default value is 16, out-of-range values will be clipped to the
valid range.
.PP
.Vb 2
\&        # default parameters
\&        gradfun=1.2:16
\&        
\&        # omitting radius
\&        gradfun=1.2
.Ve
.Sh "hflip"
.IX Subsection "hflip"
Flip the input video horizontally.
.PP
For example to horizontally flip the video in input with
\&\fIffmpeg\fR:
.PP
.Vb 1
\&        ffmpeg \-i in.avi \-vf "hflip" out.avi
.Ve
.Sh "hqdn3d"
.IX Subsection "hqdn3d"
High precision/quality 3d denoise filter. This filter aims to reduce
image noise producing smooth images and making still images really
still. It should enhance compressibility.
.PP
It accepts the following optional parameters:
\&\fIluma_spatial\fR:\fIchroma_spatial\fR:\fIluma_tmp\fR:\fIchroma_tmp\fR
.IP "\fBluma_spatial\fR" 4
.IX Item "luma_spatial"
a non-negative float number which specifies spatial luma strength,
defaults to 4.0
.IP "\fBchroma_spatial\fR" 4
.IX Item "chroma_spatial"
a non-negative float number which specifies spatial chroma strength,
defaults to 3.0*\fIluma_spatial\fR/4.0
.IP "\fBluma_tmp\fR" 4
.IX Item "luma_tmp"
a float number which specifies luma temporal strength, defaults to
6.0*\fIluma_spatial\fR/4.0
.IP "\fBchroma_tmp\fR" 4
.IX Item "chroma_tmp"
a float number which specifies chroma temporal strength, defaults to
\&\fIluma_tmp\fR*\fIchroma_spatial\fR/\fIluma_spatial\fR
.Sh "noformat"
.IX Subsection "noformat"
Force libavfilter not to use any of the specified pixel formats for the
input to the next filter.
.PP
The filter accepts a list of pixel format names, separated by \*(L":\*(R",
for example \*(L"yuv420p:monow:rgb24\*(R".
.PP
The following command:
.PP
.Vb 1
\&        ./ffmpeg \-i in.avi \-vf "noformat=yuv420p, vflip" out.avi
.Ve
.PP
will make libavfilter use a format different from \*(L"yuv420p\*(R" for the
input to the vflip filter.
.Sh "null"
.IX Subsection "null"
Pass the video source unchanged to the output.
.Sh "ocv_smooth"
.IX Subsection "ocv_smooth"
Apply smooth transform using libopencv.
.PP
To enable this filter install libopencv library and headers and
configure FFmpeg with \-\-enable\-libopencv.
.PP
The filter accepts the following parameters:
\&\fItype\fR:\fIparam1\fR:\fIparam2\fR:\fIparam3\fR:\fIparam4\fR.
.PP
\&\fItype\fR is the type of smooth filter to apply, and can be one of
the following values: \*(L"blur\*(R", \*(L"blur_no_scale\*(R", \*(L"median\*(R", \*(L"gaussian\*(R",
\&\*(L"bilateral\*(R". The default value is \*(L"gaussian\*(R".
.PP
\&\fIparam1\fR, \fIparam2\fR, \fIparam3\fR, and \fIparam4\fR are
parameters whose meanings depend on smooth type. \fIparam1\fR and
\&\fIparam2\fR accept integer positive values or 0, \fIparam3\fR and
\&\fIparam4\fR accept float values.
.PP
The default value for \fIparam1\fR is 3, the default value for the
other parameters is 0.
.PP
These parameters correspond to the parameters assigned to the
libopencv function \f(CW\*(C`cvSmooth\*(C'\fR. Refer to the official libopencv
documentation for the exact meaning of the parameters:
<\fBhttp://opencv.willowgarage.com/documentation/c/image_filtering.html\fR>
.Sh "overlay"
.IX Subsection "overlay"
Overlay one video on top of another.
.PP
It takes two inputs and one output, the first input is the \*(L"main\*(R"
video on which the second input is overlayed.
.PP
It accepts the parameters: \fIx\fR:\fIy\fR.
.PP
\&\fIx\fR is the x coordinate of the overlayed video on the main video,
\&\fIy\fR is the y coordinate. The parameters are expressions containing
the following parameters:
.IP "\fBmain_w, main_h\fR" 4
.IX Item "main_w, main_h"
main input width and height
.IP "\fBW, H\fR" 4
.IX Item "W, H"
same as \fImain_w\fR and \fImain_h\fR
.IP "\fBoverlay_w, overlay_h\fR" 4
.IX Item "overlay_w, overlay_h"
overlay input width and height
.IP "\fBw, h\fR" 4
.IX Item "w, h"
same as \fIoverlay_w\fR and \fIoverlay_h\fR
.PP
Be aware that frames are taken from each input video in timestamp
order, hence, if their initial timestamps differ, it is a a good idea
to pass the two inputs through a \fIsetpts=PTS\-STARTPTS\fR filter to
have them begin in the same zero timestamp, as it does the example for
the \fImovie\fR filter.
.PP
Follow some examples:
.PP
.Vb 3
\&        # draw the overlay at 10 pixels from the bottom right
\&        # corner of the main video.
\&        overlay=main_w\-overlay_w\-10:main_h\-overlay_h\-10
\&        
\&        # insert a transparent PNG logo in the bottom left corner of the input
\&        movie=0:png:logo.png [logo];
\&        [in][logo] overlay=10:main_h\-overlay_h\-10 [out]
\&        
\&        # insert 2 different transparent PNG logos (second logo on bottom
\&        # right corner):
\&        movie=0:png:logo1.png [logo1];
\&        movie=0:png:logo2.png [logo2];
\&        [in][logo1]       overlay=10:H\-h\-10 [in+logo1];
\&        [in+logo1][logo2] overlay=W\-w\-10:H\-h\-10 [out]
\&        
\&        # add a transparent color layer on top of the main video,
\&        # WxH specifies the size of the main input to the overlay filter
\&        color=red.3:WxH [over]; [in][over] overlay [out]
.Ve
.PP
You can chain togheter more overlays but the efficiency of such
approach is yet to be tested.
.Sh "pad"
.IX Subsection "pad"
Add paddings to the input image, and places the original input at the
given coordinates \fIx\fR, \fIy\fR.
.PP
It accepts the following parameters:
\&\fIwidth\fR:\fIheight\fR:\fIx\fR:\fIy\fR:\fIcolor\fR.
.PP
Follows the description of the accepted parameters.
.IP "\fBwidth, height\fR" 4
.IX Item "width, height"
Specify the size of the output image with the paddings added. If the
value for \fIwidth\fR or \fIheight\fR is 0, the corresponding input size
is used for the output.
.Sp
The default value of \fIwidth\fR and \fIheight\fR is 0.
.IP "\fBx, y\fR" 4
.IX Item "x, y"
Specify the offsets where to place the input image in the padded area
with respect to the top/left border of the output image.
.Sp
The default value of \fIx\fR and \fIy\fR is 0.
.IP "\fBcolor\fR" 4
.IX Item "color"
Specify the color of the padded area, it can be the name of a color
(case insensitive match) or a 0xRRGGBB[\s-1AA\s0] sequence.
.Sp
The default value of \fIcolor\fR is \*(L"black\*(R".
.PP
For example:
.PP
.Vb 4
\&        # Add paddings with color "violet" to the input video. Output video
\&        # size is 640x480, the top\-left corner of the input video is placed at
\&        # row 0, column 40.
\&        pad=640:480:0:40:violet
.Ve
.Sh "pixdesctest"
.IX Subsection "pixdesctest"
Pixel format descriptor test filter, mainly useful for internal
testing. The output video should be equal to the input video.
.PP
For example:
.PP
.Vb 1
\&        format=monow, pixdesctest
.Ve
.PP
can be used to test the monowhite pixel format descriptor definition.
.Sh "scale"
.IX Subsection "scale"
Scale the input video to \fIwidth\fR:\fIheight\fR and/or convert the image format.
.PP
For example the command:
.PP
.Vb 1
\&        ./ffmpeg \-i in.avi \-vf "scale=200:100" out.avi
.Ve
.PP
will scale the input video to a size of 200x100.
.PP
If the input image format is different from the format requested by
the next filter, the scale filter will convert the input to the
requested format.
.PP
If the value for \fIwidth\fR or \fIheight\fR is 0, the respective input
size is used for the output.
.PP
If the value for \fIwidth\fR or \fIheight\fR is \-1, the scale filter will
use, for the respective output size, a value that maintains the aspect
ratio of the input image.
.PP
The default value of \fIwidth\fR and \fIheight\fR is 0.
.Sh "setpts"
.IX Subsection "setpts"
Change the \s-1PTS\s0 (presentation timestamp) of the input video frames.
.PP
Accept in input an expression evaluated through the eval \s-1API\s0, which
can contain the following constants:
.IP "\fB\s-1PTS\s0\fR" 4
.IX Item "PTS"
the presentation timestamp in input
.IP "\fB\s-1PI\s0\fR" 4
.IX Item "PI"
Greek \s-1PI\s0
.IP "\fB\s-1PHI\s0\fR" 4
.IX Item "PHI"
golden ratio
.IP "\fBE\fR" 4
.IX Item "E"
Euler number
.IP "\fBN\fR" 4
.IX Item "N"
the count of the input frame, starting from 0.
.IP "\fB\s-1STARTPTS\s0\fR" 4
.IX Item "STARTPTS"
the \s-1PTS\s0 of the first video frame
.IP "\fB\s-1INTERLACED\s0\fR" 4
.IX Item "INTERLACED"
tell if the current frame is interlaced
.IP "\fB\s-1POS\s0\fR" 4
.IX Item "POS"
original position in the file of the frame, or undefined if undefined
for the current frame
.IP "\fB\s-1PREV_INPTS\s0\fR" 4
.IX Item "PREV_INPTS"
previous input \s-1PTS\s0
.IP "\fB\s-1PREV_OUTPTS\s0\fR" 4
.IX Item "PREV_OUTPTS"
previous output \s-1PTS\s0
.PP
Some examples follow:
.PP
.Vb 2
\&        # start counting PTS from zero
\&        setpts=PTS\-STARTPTS
\&        
\&        # fast motion
\&        setpts=0.5*PTS
\&        
\&        # slow motion
\&        setpts=2.0*PTS
\&        
\&        # fixed rate 25 fps
\&        setpts=N/(25*TB)
\&        
\&        # fixed rate 25 fps with some jitter
\&        setpts=\*(Aq1/(25*TB) * (N + 0.05 * sin(N*2*PI/25))\*(Aq
.Ve
.Sh "settb"
.IX Subsection "settb"
Set the timebase to use for the output frames timestamps.
It is mainly useful for testing timebase configuration.
.PP
It accepts in input an arithmetic expression representing a rational.
The expression can contain the constants \*(L"\s-1PI\s0\*(R", \*(L"E\*(R", \*(L"\s-1PHI\s0\*(R", \*(L"\s-1AVTB\s0\*(R" (the
default timebase), and \*(L"intb\*(R" (the input timebase).
.PP
The default value for the input is \*(L"intb\*(R".
.PP
Follow some examples.
.PP
.Vb 2
\&        # set the timebase to 1/25
\&        settb=1/25
\&        
\&        # set the timebase to 1/10
\&        settb=0.1
\&        
\&        #set the timebase to 1001/1000
\&        settb=1+0.001
\&        
\&        #set the timebase to 2*intb
\&        settb=2*intb
\&        
\&        #set the default timebase value
\&        settb=AVTB
.Ve
.Sh "slicify"
.IX Subsection "slicify"
Pass the images of input video on to next video filter as multiple
slices.
.PP
.Vb 1
\&        ./ffmpeg \-i in.avi \-vf "slicify=32" out.avi
.Ve
.PP
The filter accepts the slice height as parameter. If the parameter is
not specified it will use the default value of 16.
.PP
Adding this in the beginning of filter chains should make filtering
faster due to better use of the memory cache.
.Sh "transpose"
.IX Subsection "transpose"
Transpose rows with columns in the input video and optionally flip it.
.PP
It accepts a parameter representing an integer, which can assume the
values:
.IP "\fB0\fR" 4
.IX Item "0"
Rotate by 90 degrees counterclockwise and vertically flip (default), that is:
.Sp
.Vb 3
\&        L.R     L.l
\&        . . \->  . .
\&        l.r     R.r
.Ve
.IP "\fB1\fR" 4
.IX Item "1"
Rotate by 90 degrees clockwise, that is:
.Sp
.Vb 3
\&        L.R     l.L
\&        . . \->  . .
\&        l.r     r.R
.Ve
.IP "\fB2\fR" 4
.IX Item "2"
Rotate by 90 degrees counterclockwise, that is:
.Sp
.Vb 3
\&        L.R     R.r
\&        . . \->  . .
\&        l.r     L.l
.Ve
.IP "\fB3\fR" 4
.IX Item "3"
Rotate by 90 degrees clockwise and vertically flip, that is:
.Sp
.Vb 3
\&        L.R     r.R
\&        . . \->  . .
\&        l.r     l.L
.Ve
.Sh "unsharp"
.IX Subsection "unsharp"
Sharpen or blur the input video.
.PP
It accepts the following parameters:
\&\fIluma_msize_x\fR:\fIluma_msize_y\fR:\fIluma_amount\fR:\fIchroma_msize_x\fR:\fIchroma_msize_y\fR:\fIchroma_amount\fR
.PP
Negative values for the amount will blur the input video, while positive
values will sharpen. All parameters are optional and default to the
equivalent of the string '5:5:1.0:0:0:0.0'.
.IP "\fBluma_msize_x\fR" 4
.IX Item "luma_msize_x"
Set the luma matrix horizontal size. It can be an integer between 3
and 13, default value is 5.
.IP "\fBluma_msize_y\fR" 4
.IX Item "luma_msize_y"
Set the luma matrix vertical size. It can be an integer between 3
and 13, default value is 5.
.IP "\fBluma_amount\fR" 4
.IX Item "luma_amount"
Set the luma effect strength. It can be a float number between \-2.0
and 5.0, default value is 1.0.
.IP "\fBchroma_msize_x\fR" 4
.IX Item "chroma_msize_x"
Set the chroma matrix horizontal size. It can be an integer between 3
and 13, default value is 0.
.IP "\fBchroma_msize_y\fR" 4
.IX Item "chroma_msize_y"
Set the chroma matrix vertical size. It can be an integer between 3
and 13, default value is 0.
.IP "\fBluma_amount\fR" 4
.IX Item "luma_amount"
Set the chroma effect strength. It can be a float number between \-2.0
and 5.0, default value is 0.0.
.PP
.Vb 2
\&        # Strong luma sharpen effect parameters
\&        unsharp=7:7:2.5
\&        
\&        # Strong blur of both luma and chroma parameters
\&        unsharp=7:7:\-2:7:7:\-2
\&        
\&        # Use the default values with B<ffmpeg>
\&        ./ffmpeg \-i in.avi \-vf "unsharp" out.mp4
.Ve
.Sh "vflip"
.IX Subsection "vflip"
Flip the input video vertically.
.PP
.Vb 1
\&        ./ffmpeg \-i in.avi \-vf "vflip" out.avi
.Ve
.Sh "yadif"
.IX Subsection "yadif"
yadif is \*(L"yet another deinterlacing filter\*(R".
.PP
It accepts the syntax:
.PP
.Vb 1
\&        yadif=[<mode>[:<parity>]]
.Ve
.IP "\fBmode\fR" 4
.IX Item "mode"
Specify the interlacing mode to adopt, accepts one of the following values.
.Sp
0: Output 1 frame for each frame.
.Sp
1: Output 1 frame for each field.
.Sp
2: Like 0 but skips spatial interlacing check.
.Sp
3: Like 1 but skips spatial interlacing check.
.Sp
Default value is 0.
.IP "\fBparity\fR" 4
.IX Item "parity"
0 if is bottom field first, 1 if the interlaced video is top field
first, \-1 to enable automatic detection.
.SH "VIDEO SOURCES"
.IX Header "VIDEO SOURCES"
Below is a description of the currently available video sources.
.Sh "buffer"
.IX Subsection "buffer"
Buffer video frames, and make them available to the filter chain.
.PP
This source is mainly intended for a programmatic use, in particular
through the interface defined in \fIlibavfilter/vsrc_buffer.h\fR.
.PP
It accepts the following parameters:
\&\fIwidth\fR:\fIheight\fR:\fIpix_fmt_string\fR:\fItimebase_num\fR:\fItimebase_den\fR
.PP
All the parameters need to be explicitely defined.
.PP
Follows the list of the accepted parameters.
.IP "\fBwidth, height\fR" 4
.IX Item "width, height"
Specify the width and height of the buffered video frames.
.IP "\fBpix_fmt_string\fR" 4
.IX Item "pix_fmt_string"
A string representing the pixel format of the buffered video frames.
It may be a number corresponding to a pixel format, or a pixel format
name.
.IP "\fBtimebase_num, timebase_den\fR" 4
.IX Item "timebase_num, timebase_den"
Specify numerator and denomitor of the timebase assumed by the
timestamps of the buffered frames.
.PP
For example:
.PP
.Vb 1
\&        buffer=320:240:yuv410p:1:24
.Ve
.PP
will instruct the source to accept video frames with size 320x240 and
with format \*(L"yuv410p\*(R" and assuming 1/24 as the timestamps timebase.
Since the pixel format with name \*(L"yuv410p\*(R" corresponds to the number 6
(check the enum PixelFormat definition in \fIlibavutil/pixfmt.h\fR),
this example corresponds to:
.PP
.Vb 1
\&        buffer=320:240:6:1:24
.Ve
.Sh "color"
.IX Subsection "color"
Provide an uniformly colored input.
.PP
It accepts the following parameters:
\&\fIcolor\fR:\fIframe_size\fR:\fIframe_rate\fR
.PP
Follows the description of the accepted parameters.
.IP "\fBcolor\fR" 4
.IX Item "color"
Specify the color of the source. It can be the name of a color (case
insensitive match) or a 0xRRGGBB[\s-1AA\s0] sequence, possibly followed by an
alpha specifier. The default value is \*(L"black\*(R".
.IP "\fBframe_size\fR" 4
.IX Item "frame_size"
Specify the size of the sourced video, it may be a string of the form
\&\fIwidth\fRx\fIheigth\fR, or the name of a size abbreviation. The
default value is \*(L"320x240\*(R".
.IP "\fBframe_rate\fR" 4
.IX Item "frame_rate"
Specify the frame rate of the sourced video, as the number of frames
generated per second. It has to be a string in the format
\&\fIframe_rate_num\fR/\fIframe_rate_den\fR, an integer number, a float
number or a valid video frame rate abbreviation. The default value is
\&\*(L"25\*(R".
.PP
For example the following graph description will generate a red source
with an opacity of 0.2, with size \*(L"qcif\*(R" and a frame rate of 10
frames per second, which will be overlayed over the source connected
to the pad with identifier \*(L"in\*(R".
.PP
.Vb 1
\&        "color=red@0.2:qcif:10 [color]; [in][color] overlay [out]"
.Ve
.Sh "nullsrc"
.IX Subsection "nullsrc"
Null video source, never return images. It is mainly useful as a
template and to be employed in analysis / debugging tools.
.PP
It accepts as optional parameter a string of the form
\&\fIwidth\fR:\fIheight\fR:\fItimebase\fR.
.PP
\&\fIwidth\fR and \fIheight\fR specify the size of the configured
source. The default values of \fIwidth\fR and \fIheight\fR are
respectively 352 and 288 (corresponding to the \s-1CIF\s0 size format).
.PP
\&\fItimebase\fR specifies an arithmetic expression representing a
timebase. The expression can contain the constants \*(L"\s-1PI\s0\*(R", \*(L"E\*(R", \*(L"\s-1PHI\s0\*(R",
\&\*(L"\s-1AVTB\s0\*(R" (the default timebase), and defaults to the value \*(L"\s-1AVTB\s0\*(R".
.Sh "frei0r_src"
.IX Subsection "frei0r_src"
Provide a frei0r source.
.PP
To enable compilation of this filter you need to install the frei0r
header and configure FFmpeg with \-\-enable\-frei0r.
.PP
The source supports the syntax:
.PP
.Vb 1
\&        <size>:<rate>:<src_name>[{=|:}<param1>:<param2>:...:<paramN>]
.Ve
.PP
\&\fIsize\fR is the size of the video to generate, may be a string of the
form \fIwidth\fRx\fIheight\fR or a frame size abbreviation.
\&\fIrate\fR is the rate of the video to generate, may be a string of
the form \fInum\fR/\fIden\fR or a frame rate abbreviation.
\&\fIsrc_name\fR is the name to the frei0r source to load. For more
information regarding frei0r and how to set the parameters read the
section \*(L"frei0r\*(R" in the description of the video
filters.
.PP
Some examples follow:
.PP
.Vb 3
\&        # generate a frei0r partik0l source with size 200x200 and framerate 10
\&        # which is overlayed on the overlay filter main input
\&        frei0r_src=200x200:10:partik0l=1234 [overlay]; [in][overlay] overlay
.Ve
.SH "VIDEO SINKS"
.IX Header "VIDEO SINKS"
Below is a description of the currently available video sinks.
.Sh "nullsink"
.IX Subsection "nullsink"
Null video sink, do absolutely nothing with the input video. It is
mainly useful as a template and to be employed in analysis / debugging
tools.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffplay\fR\|(1), \fIffprobe\fR\|(1), \fIffserver\fR\|(1) and the FFmpeg \s-1HTML\s0 documentation
.SH "AUTHORS"
.IX Header "AUTHORS"
The FFmpeg developers
